{
  "id": "d6adf0bf-38f8-4231-87a2-b97305ccbd17",
  "name": "Company Directory",
  "template": "custom",
  "owner": "demo17@bezl.io",
  "shares": [],
  "vars": [
    {
      "name": "data",
      "value": "[]"
    },
    {
      "name": "dataIterator",
      "value": "[]"
    }
  ],
  "dataSubscriptions": [],
  "markup": [
    "<label class=\"pull-right\" [hidden]=\"!bezl.vars['config'].refreshing\">Loading... <i class=\"fa fa-spinner fa-spin\" style=\"font-size:24px\"></i></label>",
    "<button (click)=\"bezl.functions['refresh']()\" class=\"btn btn-md btn-primary pull-right\" *ngIf=\"!bezl.vars['config'].refreshing\">Refresh</button>",
    "<div class=\"row\">",
    "<table style=\"width: 100%\" class=\"table table-striped\">",
    "    <tbody>",
    "        <!-- Start off by showing the top level column headers -->",
    "        <template ngFor let-s [ngForOf]=\"bezl.vars['config'].structure\" let-i=\"index\">",
    "            <tr *ngIf=\"i == 0\" style=\"background-color: white\">",
    "                <td  *ngIf=\"s.columns.length > 0 || s.type=='group'\">",
    "                    <div class=\"row\" style=\"padding: 0px\">",
    "                        ",
    "                        <div [ngClass]=\"'col-sm-' + c.columnSize\"",
    "                            *ngFor=\"let c of s.columns\"",
    "                            style=\"padding-left: 0px; padding-right: 0px;\">",
    "                            ",
    "                            <div style=\"width: 100%;text-align: center;\">",
    "                                <button type=\"button\" ",
    "                                        class=\"btn btn-default\"",
    "                                        style=\"background-color:white; width: 100%\"",
    "                                        (click)=\"bezl.functions['sort']( { section: s, column: c, sequence: 1, initial: false } )\">",
    "                                    <span>{{c.columnHeading}}</span>",
    "                                    <i class=\"fa fa-sort-numeric-asc pull-right\" aria-hidden=\"true\" ",
    "                                        *ngIf=\"c.sort == 'ascending' && (c.formatter.type == 'currency' || c.formatter.type == 'number' || c.formatter.type == 'percent')\"></i>",
    "                                    <i class=\"fa fa-sort-numeric-desc pull-right\" aria-hidden=\"true\" ",
    "                                        *ngIf=\"c.sort == 'descending' && (c.formatter.type == 'currency' || c.formatter.type == 'number' || c.formatter.type == 'percent')\"></i>",
    "                                    <i class=\"fa fa-sort-alpha-asc pull-right\" aria-hidden=\"true\" ",
    "                                        *ngIf=\"c.sort == 'ascending' && (c.formatter.type != 'currency' && c.formatter.type != 'number' && c.formatter.type != 'percent')\"></i>",
    "                                    <i class=\"fa fa-sort-alpha-desc pull-right\" aria-hidden=\"true\" ",
    "                                        *ngIf=\"c.sort == 'descending' && (c.formatter.type != 'currency' && c.formatter.type != 'number' && c.formatter.type != 'percent')\"></i>",
    "                                </button>",
    "                            </div>",
    "                        </div>",
    "                    </div> ",
    "                </td>",
    "            </tr>",
    "        </template>",
    "",
    "        <!-- Now begin looping through the entire data structure to construct our layout -->",
    "        <template ngFor let-d [ngForOf]=\"bezl.vars['dataIterator']\" let-i=\"index\">",
    "            <tr *ngIf=\"d.sequence == 1 || d.show\">",
    "                <td>",
    "                    <div class=\"row\" style=\"padding: 0px\"",
    "                        (click)=\"bezl.functions['selectRow'](d)\">",
    "                        <!-- Output the data in appropriate columns -->",
    "                        <div [ngClass]=\"'col-sm-' + c.columnSize\"",
    "                            *ngFor=\"let c of d.columns\"",
    "                            [ngStyle]=\"{'margin-left.px': ((c.columnPosition == 1) ? (d.sequence - 1) * 40 : 0)}\">",
    "                                <div *ngIf=\"d.type == 'group' && c.columnPosition == 1\" class=\"col-sm-1\" style=\"padding-right: 20px\">",
    "                                    <i class=\"fa fa-chevron-right\" aria-hidden=\"true\" *ngIf=\"!d.selected\"></i>",
    "                                    <i class=\"fa fa-chevron-down\" aria-hidden=\"true\" *ngIf=\"d.selected\"></i>",
    "                                </div>",
    "",
    "                                <div align=\"right\" *ngIf=\"c.formatter.type == 'currency'\">",
    "                                    {{(d.data[c.columnId] || d.data[c.columnName]) | currency:c.formatter.currencyCode:c.formatter.symbolDisplay:(c.formatter.minIntegerDigits || '1') + ",
    "                                                            '.' + (c.formatter.minFractionDigits || '0') + ",
    "                                                            '-' + (c.formatter.maxFractionDigits || '1')}}",
    "                                </div>",
    "",
    "                                <div align=\"right\" *ngIf=\"c.formatter.type == 'percent'\">",
    "                                    {{(d.data[c.columnId] || d.data[c.columnName]) | percent:(c.formatter.minIntegerDigits || '1') + ",
    "                                                            '.' + (c.formatter.minFractionDigits || '0') + ",
    "                                                            '-' + (c.formatter.maxFractionDigits || '1')}}",
    "                                </div>",
    "",
    "                                <div *ngIf=\"c.formatter.type == 'date'\">",
    "                                    {{(d.data[c.columnId] || d.data[c.columnName]) | date:c.formatter.format}}",
    "                                </div>",
    "",
    "                                <div align=\"right\" *ngIf=\"c.formatter.type == 'number'\">",
    "                                    {{(d.data[c.columnId] || d.data[c.columnName]) | number:(c.formatter.minIntegerDigits || '1') + ",
    "                                                            '.' + (c.formatter.minFractionDigits || '0') + ",
    "                                                            '-' + (c.formatter.maxFractionDigits || '1')}}",
    "                                </div>",
    "",
    "                                <div *ngIf=\"c.formatter.type == ''\">",
    "\t\t\t\t\t\t\t\t\t<div *ngIf=\"c.columnName == 'PhoneNumber'\">",
    "                                      <a href=\"tel:{{(d.data[c.columnId] || d.data[c.columnName])}}\">{{(d.data[c.columnId] || d.data[c.columnName])}}</a>",
    "                                  \t</div>",
    "                                  ",
    "\t\t\t\t\t\t\t\t\t<div *ngIf=\"c.columnName == 'E-Mail'\">",
    "                                      <a href=\"mailto:{{(d.data[c.columnId] || d.data[c.columnName])}}\">{{(d.data[c.columnId] || d.data[c.columnName])}}</a>",
    "                                  \t</div>",
    "\t",
    "                                  \t<div *ngIf=\"c.columnName != 'PhoneNumber' && c.columnName != 'E-Mail'\">",
    "                                    \t{{(d.data[c.columnId] || d.data[c.columnName])}}",
    "                                 \t</div>",
    "                                </div>",
    "                        </div>",
    "                    </div> ",
    "",
    "                </td>",
    "            </tr>",
    "",
    "            <!-- Add column headings if this is a grouping -->",
    "            <template ngFor let-s [ngForOf]=\"bezl.vars['config'].structure\">",
    "                <tr *ngIf=\"s.sequence == d.sequence + 1 && d.selected\" style=\"background-color: white\">",
    "                    <td  *ngIf=\"s.columns.length > 0\">",
    "                        <div class=\"row\" style=\"padding: 0px\">                                                                    ",
    "                            <div [ngClass]=\"'col-sm-' + c.columnSize\"",
    "                                *ngFor=\"let c of s.columns\"",
    "                                style=\"padding-left: 0px; padding-right: 0px;\"",
    "                                [ngStyle]=\"{'margin-left.px': ((c.columnPosition == 1) ? (s.sequence - 1) * 40 : 0)}\">",
    "                                ",
    "                                <div style=\"width: 100%;text-align: center;\">",
    "                                    <button type=\"button\" ",
    "                                            class=\"btn btn-default\"",
    "                                            style=\"background-color:white; width: 100%\"",
    "                                            (click)=\"bezl.functions['sort']( { section: s, column: c, sequence: s.sequence, initial: false } )\">",
    "                                        <span>{{c.columnHeading}}</span>",
    "                                        <i class=\"fa fa-sort-numeric-asc pull-right\" aria-hidden=\"true\" ",
    "                                            *ngIf=\"c.sort == 'ascending' && (c.formatter.type == 'currency' || c.formatter.type == 'number' || c.formatter.type == 'percent')\"></i>",
    "                                        <i class=\"fa fa-sort-numeric-desc pull-right\" aria-hidden=\"true\" ",
    "                                            *ngIf=\"c.sort == 'descending' && (c.formatter.type == 'currency' || c.formatter.type == 'number' || c.formatter.type == 'percent')\"></i>",
    "                                        <i class=\"fa fa-sort-alpha-asc pull-right\" aria-hidden=\"true\" ",
    "                                            *ngIf=\"c.sort == 'ascending' && (c.formatter.type != 'currency' && c.formatter.type != 'number' && c.formatter.type != 'percent')\"></i>",
    "                                        <i class=\"fa fa-sort-alpha-desc pull-right\" aria-hidden=\"true\" ",
    "                                            *ngIf=\"c.sort == 'descending' && (c.formatter.type != 'currency' && c.formatter.type != 'number' && c.formatter.type != 'percent')\"></i>",
    "                                    </button>",
    "                                </div>",
    "                            </div>",
    "                        </div> ",
    "                    </td>",
    "                </tr>",
    "            </template>",
    "        </template>",
    "    </tbody>",
    "</table>",
    "</div>"
  ],
  "functions": [
    {
      "method": "ngOnInit",
      "code": "bezl.functions.setConfig();\nrequire([bezl.vars.config.baseJsUrl + 'onStartup.js'], function(functions) {\n\tfunctions.onStartup(bezl)\n});",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "bezl.functions.setConfig();\r\nrequire([bezl.vars.config.baseJsUrl + 'onStartup.js'], function (functions) {\r\n    functions.onStartup(bezl);\r\n});\r\n"
    },
    {
      "method": "onDataChange",
      "code": "bezl.data = dataResp;\n\nbezl.functions.setConfig();\nrequire([bezl.vars.config.baseJsUrl + 'onDataChange.js'], function(functions) {\n\tfunctions.onDataChange(bezl)\n});",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "bezl.data = dataResp;\r\nbezl.functions.setConfig();\r\nrequire([bezl.vars.config.baseJsUrl + 'onDataChange.js'], function (functions) {\r\n    functions.onDataChange(bezl);\r\n});\r\n"
    },
    {
      "method": "refresh",
      "code": "bezl.functions.setConfig();\nrequire([bezl.vars.config.baseJsUrl + 'directory.js'], function(functions) {\n\tfunctions.refresh(bezl)\n});",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "bezl.functions.setConfig();\r\nrequire([bezl.vars.config.baseJsUrl + 'directory.js'], function (functions) {\r\n    functions.refresh(bezl);\r\n});\r\n"
    },
    {
      "method": "regenerateOutput",
      "code": "bezl.functions.setConfig();\nrequire([bezl.vars.config.baseJsUrl + 'directory.js'], function(functions) {\n\tfunctions.regenerateOutput(bezl)\n});",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts",
        "d3"
      ],
      "compiled": "bezl.functions.setConfig();\r\nrequire([bezl.vars.config.baseJsUrl + 'directory.js'], function (functions) {\r\n    functions.regenerateOutput(bezl);\r\n});\r\n"
    },
    {
      "method": "sort",
      "code": "bezl.functions.setConfig();\nrequire([bezl.vars.config.baseJsUrl + 'directory.js'], function(functions) {\n\tfunctions.sort(bezl, parm)\n});",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "bezl.functions.setConfig();\r\nrequire([bezl.vars.config.baseJsUrl + 'directory.js'], function (functions) {\r\n    functions.sort(bezl, parm);\r\n});\r\n"
    },
    {
      "method": "selectRow",
      "code": "bezl.functions.setConfig();\nrequire([bezl.vars.config.baseJsUrl + 'directory.js'], function(functions) {\n\tfunctions.selectRow(bezl, parm)\n});",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "bezl.functions.setConfig();\r\nrequire([bezl.vars.config.baseJsUrl + 'directory.js'], function (functions) {\r\n    functions.selectRow(bezl, parm);\r\n});\r\n"
    },
    {
      "method": "setConfig",
      "code": "bezl.vars.config = {\n\t\"description\": \"Advanced Grid\",\n\t\"icon\": \"fa-table\",\n\t\"ref\": \"1ea17cbe-5c14-6c2a-640b\",\n\t\"showAll\": false,\n\t\"outputFormula\": \"bezl.vars.data = d3.nest().key(function(d) { return d.Location; }).key(function(d) { return d.Department; }).entries(bezl.data.directory);\",\n\t\"structure\": [\n\t\t{\n\t\t\t\"sequence\": 1,\n\t\t\t\"type\": \"group\",\n\t\t\t\"caption\": \"Location Grouping:\",\n\t\t\t\"groupField\": \"Location\",\n\t\t\t\"summaryOperation\": \"first\",\n\t\t\t\"columns\": [\n\t\t\t\t{\n\t\t\t\t\t\"columnId\": \"f833dc57-a02f-e4b4-9a5b\",\n\t\t\t\t\t\"columnName\": \"Location\",\n\t\t\t\t\t\"columnHeading\": \"Location\",\n\t\t\t\t\t\"columnSize\": 4,\n\t\t\t\t\t\"columnPosition\": 1,\n\t\t\t\t\t\"formatter\": {\n\t\t\t\t\t\t\"type\": \"\",\n\t\t\t\t\t\t\"obj\": {\n\t\t\t\t\t\t\t\"parameters\": []\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"sort\": \"ascending\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"columnId\": \"c7a8e537-e648-ac67-92f2\",\n\t\t\t\t\t\"columnName\": \"FirstName\",\n\t\t\t\t\t\"columnHeading\": \"Employees\",\n\t\t\t\t\t\"columnSize\": 2,\n\t\t\t\t\t\"columnPosition\": 2,\n\t\t\t\t\t\"formatter\": {\n\t\t\t\t\t\t\"type\": \"\",\n\t\t\t\t\t\t\"obj\": {\n\t\t\t\t\t\t\t\"parameters\": []\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"sort\": \"\",\n\t\t\t\t\t\"summaryOperation\": \"count\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"sequence\": 2,\n\t\t\t\"type\": \"group\",\n\t\t\t\"caption\": \"Department Grouping:\",\n\t\t\t\"groupField\": \"Department\",\n\t\t\t\"summaryOperation\": \"first\",\n\t\t\t\"columns\": [\n\t\t\t\t{\n\t\t\t\t\t\"columnId\": \"2c1b5366-7c5a-a1e7-1a4e\",\n\t\t\t\t\t\"columnName\": \"Department\",\n\t\t\t\t\t\"columnHeading\": \"Department\",\n\t\t\t\t\t\"columnSize\": 4,\n\t\t\t\t\t\"columnPosition\": 1,\n\t\t\t\t\t\"formatter\": {\n\t\t\t\t\t\t\"type\": \"\",\n\t\t\t\t\t\t\"obj\": {\n\t\t\t\t\t\t\t\"parameters\": []\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"sort\": \"ascending\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"columnId\": \"afa058fe-d184-fe23-c4fa\",\n\t\t\t\t\t\"columnName\": \"FirstName\",\n\t\t\t\t\t\"columnHeading\": \"Employees\",\n\t\t\t\t\t\"columnSize\": 2,\n\t\t\t\t\t\"columnPosition\": 2,\n\t\t\t\t\t\"formatter\": {\n\t\t\t\t\t\t\"type\": \"\",\n\t\t\t\t\t\t\"obj\": {\n\t\t\t\t\t\t\t\"parameters\": []\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"sort\": \"\",\n\t\t\t\t\t\"summaryOperation\": \"count\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"sequence\": 3,\n\t\t\t\"type\": \"detail\",\n\t\t\t\"caption\": \"Details:\",\n\t\t\t\"groupField\": \"\",\n\t\t\t\"summaryOperation\": \"\",\n\t\t\t\"columns\": [\n\t\t\t\t{\n\t\t\t\t\t\"columnId\": \"245bd417-eb91-45f6-7484\",\n\t\t\t\t\t\"columnName\": \"LastName\",\n\t\t\t\t\t\"columnHeading\": \"Last Name\",\n\t\t\t\t\t\"columnSize\": 2,\n\t\t\t\t\t\"columnPosition\": 1,\n\t\t\t\t\t\"formatter\": {\n\t\t\t\t\t\t\"type\": \"\",\n\t\t\t\t\t\t\"obj\": {\n\t\t\t\t\t\t\t\"parameters\": []\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"sort\": \"ascending\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"columnId\": \"a4b35294-ff83-1d3b-0aeb\",\n\t\t\t\t\t\"columnName\": \"FirstName\",\n\t\t\t\t\t\"columnHeading\": \"First Name\",\n\t\t\t\t\t\"columnSize\": 2,\n\t\t\t\t\t\"columnPosition\": 2,\n\t\t\t\t\t\"formatter\": {\n\t\t\t\t\t\t\"type\": \"\",\n\t\t\t\t\t\t\"obj\": {\n\t\t\t\t\t\t\t\"parameters\": []\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"sort\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"columnId\": \"b1932440-9be1-5ae2-dfc7\",\n\t\t\t\t\t\"columnName\": \"Title\",\n\t\t\t\t\t\"columnHeading\": \"Title\",\n\t\t\t\t\t\"columnSize\": 2,\n\t\t\t\t\t\"columnPosition\": 3,\n\t\t\t\t\t\"formatter\": {\n\t\t\t\t\t\t\"type\": \"\",\n\t\t\t\t\t\t\"obj\": {\n\t\t\t\t\t\t\t\"parameters\": []\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"sort\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"columnId\": \"1a287679-d349-7de9-a731\",\n\t\t\t\t\t\"columnName\": \"PhoneNumber\",\n\t\t\t\t\t\"columnHeading\": \"Phone #\",\n\t\t\t\t\t\"columnSize\": 2,\n\t\t\t\t\t\"columnPosition\": 4,\n\t\t\t\t\t\"formatter\": {\n\t\t\t\t\t\t\"type\": \"\",\n\t\t\t\t\t\t\"obj\": {\n\t\t\t\t\t\t\t\"parameters\": []\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"sort\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"columnId\": \"75ff7a20-5dc4-9ad0-fab5\",\n\t\t\t\t\t\"columnName\": \"E-Mail\",\n\t\t\t\t\t\"columnHeading\": \"E-Mail\",\n\t\t\t\t\t\"columnSize\": 3,\n\t\t\t\t\t\"columnPosition\": 5,\n\t\t\t\t\t\"formatter\": {\n\t\t\t\t\t\t\"type\": \"\",\n\t\t\t\t\t\t\"obj\": {\n\t\t\t\t\t\t\t\"parameters\": []\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"sort\": \"\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n};\nbezl.vars.config.directoryPlugin = \"ExcelPlugin\"; // The plugin used to download the listing of calendar events\nbezl.vars.config.directoryMethod = \"GetData\"; // The method for the above plugin to download the listing of events\n\n// The args below are what we pass to the specified plugin to get the actual event listing.\nbezl.vars.config.directoryArgs = { FileName: \"C:\\\\Program Files (x86)\\\\Bezlio Remote Data Broker\\\\Data\\\\company-directory.xlsx\",\n                                       SheetName: \"Directory\",\n                                       FirstRowColumnNames: \"Yes\" };\n\n\n\n// *********************************************************************************\n// Configuration Variables\n// Only edit these if you know what you are doing.\n// version: The version number of this app. Setting this vill use the javascript\n//          include files in the corresponding \"versions\" subfolder. An empty string\n//          will use the \"development\" javascript files in the root directory.\n// libVersion: The version number of the library javascript include files to use.\n// baseUrl: The base URL of the javascript include files. Generally this should be an\n//          empty string and the correct path will be automatically determined.\n//          However, for development you may wish to point this to a RawGit URL of\n//          a specific branch (e.g. https://rawgit.com/bezlio/bezlio-apps/my-branch).\nbezl.vars.config.version = \"1.0\";\nbezl.vars.config.libVersion = \"\";\nbezl.vars.config.baseUrl = \"\";\n// *********************************************************************************\n\n// If the baseURL is not set above then we will determine a sane default based on the URL\nif (bezl.vars.config.baseUrl == \"\") {\n    if (window.location.href.indexOf(\"portal-dev.bezl.io\") !== -1) {\n        bezl.vars.config.baseUrl = \"https://apps-dev.bezl.io\";\n    } else {\n        bezl.vars.config.baseUrl = \"https://apps.bezl.io\";\n    }\n}\n\n// If version numbers exist above they will also be added to the javascript include URLs\nbezl.vars.config.baseJsUrl = bezl.vars.config.baseUrl\n  \t\t\t\t\t\t\t+ \"/roles/common/company-directory/\"\n  \t\t\t\t\t\t\t+ (bezl.vars.config.version ? \"versions/\" + bezl.vars.config.version + \"/\" : \"\")\n  \t\t\t\t\t\t\t+ \"js/\"\nbezl.vars.config.baseLibraryUrl = bezl.vars.config.baseUrl\n  \t\t\t\t\t\t\t+ \"/libraries/\"\n\t\t\t\t\t\t\t+ (bezl.vars.config.libVersion ? \"versions/\" + bezl.vars.config.libVersion + \"/\" : \"\")",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "bezl.vars.config = {\r\n    \"description\": \"Advanced Grid\",\r\n    \"icon\": \"fa-table\",\r\n    \"ref\": \"1ea17cbe-5c14-6c2a-640b\",\r\n    \"showAll\": false,\r\n    \"outputFormula\": \"bezl.vars.data = d3.nest().key(function(d) { return d.Location; }).key(function(d) { return d.Department; }).entries(bezl.data.directory);\",\r\n    \"structure\": [\r\n        {\r\n            \"sequence\": 1,\r\n            \"type\": \"group\",\r\n            \"caption\": \"Location Grouping:\",\r\n            \"groupField\": \"Location\",\r\n            \"summaryOperation\": \"first\",\r\n            \"columns\": [\r\n                {\r\n                    \"columnId\": \"f833dc57-a02f-e4b4-9a5b\",\r\n                    \"columnName\": \"Location\",\r\n                    \"columnHeading\": \"Location\",\r\n                    \"columnSize\": 4,\r\n                    \"columnPosition\": 1,\r\n                    \"formatter\": {\r\n                        \"type\": \"\",\r\n                        \"obj\": {\r\n                            \"parameters\": []\r\n                        }\r\n                    },\r\n                    \"sort\": \"ascending\"\r\n                },\r\n                {\r\n                    \"columnId\": \"c7a8e537-e648-ac67-92f2\",\r\n                    \"columnName\": \"FirstName\",\r\n                    \"columnHeading\": \"Employees\",\r\n                    \"columnSize\": 2,\r\n                    \"columnPosition\": 2,\r\n                    \"formatter\": {\r\n                        \"type\": \"\",\r\n                        \"obj\": {\r\n                            \"parameters\": []\r\n                        }\r\n                    },\r\n                    \"sort\": \"\",\r\n                    \"summaryOperation\": \"count\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"sequence\": 2,\r\n            \"type\": \"group\",\r\n            \"caption\": \"Department Grouping:\",\r\n            \"groupField\": \"Department\",\r\n            \"summaryOperation\": \"first\",\r\n            \"columns\": [\r\n                {\r\n                    \"columnId\": \"2c1b5366-7c5a-a1e7-1a4e\",\r\n                    \"columnName\": \"Department\",\r\n                    \"columnHeading\": \"Department\",\r\n                    \"columnSize\": 4,\r\n                    \"columnPosition\": 1,\r\n                    \"formatter\": {\r\n                        \"type\": \"\",\r\n                        \"obj\": {\r\n                            \"parameters\": []\r\n                        }\r\n                    },\r\n                    \"sort\": \"ascending\"\r\n                },\r\n                {\r\n                    \"columnId\": \"afa058fe-d184-fe23-c4fa\",\r\n                    \"columnName\": \"FirstName\",\r\n                    \"columnHeading\": \"Employees\",\r\n                    \"columnSize\": 2,\r\n                    \"columnPosition\": 2,\r\n                    \"formatter\": {\r\n                        \"type\": \"\",\r\n                        \"obj\": {\r\n                            \"parameters\": []\r\n                        }\r\n                    },\r\n                    \"sort\": \"\",\r\n                    \"summaryOperation\": \"count\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"sequence\": 3,\r\n            \"type\": \"detail\",\r\n            \"caption\": \"Details:\",\r\n            \"groupField\": \"\",\r\n            \"summaryOperation\": \"\",\r\n            \"columns\": [\r\n                {\r\n                    \"columnId\": \"245bd417-eb91-45f6-7484\",\r\n                    \"columnName\": \"LastName\",\r\n                    \"columnHeading\": \"Last Name\",\r\n                    \"columnSize\": 2,\r\n                    \"columnPosition\": 1,\r\n                    \"formatter\": {\r\n                        \"type\": \"\",\r\n                        \"obj\": {\r\n                            \"parameters\": []\r\n                        }\r\n                    },\r\n                    \"sort\": \"ascending\"\r\n                },\r\n                {\r\n                    \"columnId\": \"a4b35294-ff83-1d3b-0aeb\",\r\n                    \"columnName\": \"FirstName\",\r\n                    \"columnHeading\": \"First Name\",\r\n                    \"columnSize\": 2,\r\n                    \"columnPosition\": 2,\r\n                    \"formatter\": {\r\n                        \"type\": \"\",\r\n                        \"obj\": {\r\n                            \"parameters\": []\r\n                        }\r\n                    },\r\n                    \"sort\": \"\"\r\n                },\r\n                {\r\n                    \"columnId\": \"b1932440-9be1-5ae2-dfc7\",\r\n                    \"columnName\": \"Title\",\r\n                    \"columnHeading\": \"Title\",\r\n                    \"columnSize\": 2,\r\n                    \"columnPosition\": 3,\r\n                    \"formatter\": {\r\n                        \"type\": \"\",\r\n                        \"obj\": {\r\n                            \"parameters\": []\r\n                        }\r\n                    },\r\n                    \"sort\": \"\"\r\n                },\r\n                {\r\n                    \"columnId\": \"1a287679-d349-7de9-a731\",\r\n                    \"columnName\": \"PhoneNumber\",\r\n                    \"columnHeading\": \"Phone #\",\r\n                    \"columnSize\": 2,\r\n                    \"columnPosition\": 4,\r\n                    \"formatter\": {\r\n                        \"type\": \"\",\r\n                        \"obj\": {\r\n                            \"parameters\": []\r\n                        }\r\n                    },\r\n                    \"sort\": \"\"\r\n                },\r\n                {\r\n                    \"columnId\": \"75ff7a20-5dc4-9ad0-fab5\",\r\n                    \"columnName\": \"E-Mail\",\r\n                    \"columnHeading\": \"E-Mail\",\r\n                    \"columnSize\": 3,\r\n                    \"columnPosition\": 5,\r\n                    \"formatter\": {\r\n                        \"type\": \"\",\r\n                        \"obj\": {\r\n                            \"parameters\": []\r\n                        }\r\n                    },\r\n                    \"sort\": \"\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n};\r\nbezl.vars.config.directoryPlugin = \"ExcelPlugin\"; // The plugin used to download the listing of calendar events\r\nbezl.vars.config.directoryMethod = \"GetData\"; // The method for the above plugin to download the listing of events\r\n// The args below are what we pass to the specified plugin to get the actual event listing.\r\nbezl.vars.config.directoryArgs = { FileName: \"C:\\\\Program Files (x86)\\\\Bezlio Remote Data Broker\\\\Data\\\\company-directory.xlsx\", SheetName: \"Directory\", FirstRowColumnNames: \"Yes\" };\r\n// *********************************************************************************\r\n// Configuration Variables\r\n// Only edit these if you know what you are doing.\r\n// version: The version number of this app. Setting this vill use the javascript\r\n//          include files in the corresponding \"versions\" subfolder. An empty string\r\n//          will use the \"development\" javascript files in the root directory.\r\n// libVersion: The version number of the library javascript include files to use.\r\n// baseUrl: The base URL of the javascript include files. Generally this should be an\r\n//          empty string and the correct path will be automatically determined.\r\n//          However, for development you may wish to point this to a RawGit URL of\r\n//          a specific branch (e.g. https://rawgit.com/bezlio/bezlio-apps/my-branch).\r\nbezl.vars.config.version = \"1.0\";\r\nbezl.vars.config.libVersion = \"\";\r\nbezl.vars.config.baseUrl = \"\";\r\n// *********************************************************************************\r\n// If the baseURL is not set above then we will determine a sane default based on the URL\r\nif (bezl.vars.config.baseUrl == \"\") {\r\n    if (window.location.href.indexOf(\"portal-dev.bezl.io\") !== -1) {\r\n        bezl.vars.config.baseUrl = \"https://apps-dev.bezl.io\";\r\n    }\r\n    else {\r\n        bezl.vars.config.baseUrl = \"https://apps.bezl.io\";\r\n    }\r\n}\r\n// If version numbers exist above they will also be added to the javascript include URLs\r\nbezl.vars.config.baseJsUrl = bezl.vars.config.baseUrl + \"/roles/common/company-directory/\" + (bezl.vars.config.version ? \"versions/\" + bezl.vars.config.version + \"/\" : \"\") + \"js/\";\r\nbezl.vars.config.baseLibraryUrl = bezl.vars.config.baseUrl + \"/libraries/\" + (bezl.vars.config.libVersion ? \"versions/\" + bezl.vars.config.libVersion + \"/\" : \"\");\r\n"
    }
  ],
  "data": ""
}