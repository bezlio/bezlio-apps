{
  "id": "e909a41d-3dbd-4f53-9953-225b963a9159",
  "name": "Order Inquiry",
  "template": "custom",
  "owner": "nowens@saberlogic.com",
  "shares": [],
  "vars": [],
  "dataSubscriptions": [],
  "markup": [
    "<style>",
    "  .btn.btn-mobile {",
    "  \tpadding-left: 6px;",
    "    padding-right: 6px;",
    "    width: 90px;",
    "  }",
    "  .button08 { width: 8%;}",
    "  .button1 {width: 10%;}",
    "  .button14 {width: 14%;}",
    "  .button2 {width: 18%;}",
    "  .button3 {width: 28%;}",
    "  ",
    "   .no-click {",
    "    pointer-events: none;",
    "}",
    "</style>",
    "",
    "",
    "<div class=\"panel\">",
    "  <div class=\"panel-heading\">",
    "    <div class=\"panel-control\">",
    "      <!-- Loading / Refresh -->",
    "      <label [hidden]=\"!bezl.vars.loading\">Loading... <i class=\"fa fa-spinner fa-spin\" style=\"font-size:24px\"></i></label>",
    "    </div>",
    "    <h3 class=\"panel-title\">Search</h3>",
    "  </div>",
    "  <div class=\"panel-body\">",
    "    <form class=\"form-horizontal\">",
    "       <div class=\"form-group\">",
    "         <!-- Customer drop down -->",
    "         <label for=\"customers\" class=\"col-sm-2 control-label\">Selected Customer: </label>",
    "         <div class=\"col-sm-10\">",
    "           <select id=\"customers\" name=\"customers\" class=\"form-control\"",
    "               [ngModel]=\"bezl.vars.selectedAccount?.ID\" (ngModelChange)=\"bezl.functions['custSelection']($event);\" > ",
    "             <option  *ngFor=\"let c of bezl.vars['custList']\" [value]=\"c.ID\">{{c.Name}}</option>",
    "           </select>",
    "         </div>",
    "       </div>",
    "  ",
    "      <div class=\"form-group\">",
    "        <!-- Start date -->",
    "        <label for=\"startDate\" class=\"col-sm-2 control-label\">Start Date</label>",
    "        <div class=\"col-sm-4\">",
    "          <input type=\"date\" class=\"form-control mb-2 mr-sm-2 mb-sm-0\" style=\"height:32px\" [(ngModel)]=\"bezl.vars['startDate']\" name=\"startDate\">",
    "        </div>",
    "",
    "        <!-- End date -->",
    "        <label for=\"endDate\" class=\"col-sm-2 control-label\">End Date</label>",
    "        <div class=\"col-sm-4\">",
    "          <input type=\"date\" class=\"form-control mb-2 mr-sm-2 mb-sm-0\" style=\"height:32px\" [(ngModel)]=\"bezl.vars['endDate']\" name=\"endDate\">",
    "        </div>",
    "      </div>",
    "    </form>",
    "  </div>",
    "  <div class=\"panel-footer\">",
    "    <!-- Search button -->",
    "    <button type=\"submit\" class=\"btn btn-primary\" *ngIf=\"!bezl.vars.loading\" (click)=\"bezl.functions['search']()\">Search</button>",
    "  </div>",
    "</div>",
    "",
    "<div class=\"panel\">",
    "  <div class=\"panel-heading\">",
    "    <h3 class=\"panel-title\">Filter</h3>",
    "  </div>",
    "  <div class=\"panel-body\">",
    "",
    "      <form class=\"form-horizontal\" id=\"filter\">",
    "        <div class=\"form-group\">",
    "          <label for=\"Filter\" class=\"col-sm-2 control-label\" *ngIf=\"bezl.vars.Orders\">Order Status: </label>",
    "          <div class=\"col-sm-2\">",
    "            <select class=\"form-control\" [(ngModel)]=\"bezl.vars['filter']\" id=\"Filter\" name=\"Filter\" >",
    "              <option id=\"cbAll\" value=\"All\">All</option>",
    "              <option value=\"True\">Open</option>",
    "              <option value=\"False\">Closed</option>",
    "            </select>",
    "          </div>",
    "        </div>",
    "      </form>",
    "",
    "  </div>",
    "</div>",
    "",
    "",
    "",
    "<table class=\"table table-hover table-striped\" id=\"orderList\">",
    "   <thead>",
    "    <tr>",
    "     <th>",
    "       ",
    "       <!-- This is the normal button layout for a big screen.  The small layout will follow -->",
    "       <div class=\"btn-group btn-group-justified hidden-xs\" role=\"group\" aria-label=\"Justified button group\">",
    "         <div class=\"btn-group\" role=\"group\">",
    "           <button type=\"button\"",
    "                   (click)=\"bezl.functions['sort']('OrderNum')\"",
    "                   class=\"btn btn-default\">",
    "             <span class=\"pull-left\">Order #</span>",
    "             <i class=\"fa fa-sort-numeric-asc pull-right\" aria-hidden=\"true\" ",
    "                *ngIf=\"bezl.vars.sortCol == 'OrderNum' && bezl.vars.sort == 'asc'\"></i>",
    "             <i class=\"fa fa-sort-numeric-desc pull-right\" aria-hidden=\"true\" ",
    "                *ngIf=\"bezl.vars.sortCol == 'OrderNum' && bezl.vars.sort == 'desc'\"></i>",
    "           </button>",
    "         </div>",
    "         <div class=\"btn-group\" role=\"group\">",
    "           <button type=\"button\"",
    "                   (click)=\"bezl.functions['sort']('OrderDate')\"",
    "                   class=\"btn btn-default\">",
    "             <span class=\"pull-left\">Order Date</span>",
    "             <i class=\"fa fa-sort-numeric-asc pull-right\" aria-hidden=\"true\" ",
    "                *ngIf=\"bezl.vars.sortCol == 'OrderDate' && bezl.vars.sort == 'asc'\"></i>",
    "             <i class=\"fa fa-sort-numeric-desc pull-right\" aria-hidden=\"true\" ",
    "                *ngIf=\"bezl.vars.sortCol == 'OrderDate' && bezl.vars.sort == 'desc'\"></i>",
    "           </button>",
    "         </div>",
    "         <div class=\"btn-group\" role=\"group\">",
    "           <button type=\"button\" ",
    "                   (click)=\"bezl.functions['sort']('PoNum')\"",
    "                   class=\"btn btn-default\">",
    "             <span class=\"pull-left\">PO #</span>",
    "             <i class=\"fa fa-sort-numeric-asc pull-right\" aria-hidden=\"true\" ",
    "                *ngIf=\"bezl.vars.sortCol == 'PoNum' && bezl.vars.sort == 'asc'\"></i>",
    "             <i class=\"fa fa-sort-numeric-desc pull-right\" aria-hidden=\"true\" ",
    "                *ngIf=\"bezl.vars.sortCol == 'PoNum' && bezl.vars.sort == 'desc'\"></i>",
    "           </button>",
    "         </div>",
    "         <div class=\"btn-group\" role=\"group\">",
    "           <button type=\"button\" ",
    "                   (click)=\"bezl.functions['sort']('OrderAmt')\"",
    "                   class=\"btn btn-default\">",
    "             <span class=\"pull-left\">Order Amount</span>",
    "             <i class=\"fa fa-sort-numeric-asc pull-right\" aria-hidden=\"true\" ",
    "                *ngIf=\"bezl.vars.sortCol == 'OrderAmt' && bezl.vars.sort == 'asc'\"></i>",
    "             <i class=\"fa fa-sort-numeric-desc pull-right\" aria-hidden=\"true\" ",
    "                *ngIf=\"bezl.vars.sortCol == 'OrderAmt' && bezl.vars.sort == 'desc'\"></i>",
    "           </button>",
    "         </div>",
    "       </div>",
    "       ",
    "       <!-- This is the normal button layout for small screens -->",
    "       <div class=\"visible-xs\">",
    "\t\t<div class=\"row\">",
    "          <div class=\"col-sm-12\">",
    "         Sort By:<br />",
    "            <div class=\"btn-group btn-group-justified\">",
    "         \t<div class=\"btn-group\">",
    "             <button type=\"button\"",
    "                     (click)=\"bezl.functions['sort']('OrderDate')\"",
    "                     class=\"btn btn-default\" >",
    "               <span class=\"pull-left\">Order Date</span>",
    "               <i class=\"fa fa-sort-numeric-asc pull-right\" aria-hidden=\"true\" ",
    "                  *ngIf=\"bezl.vars.sortCol == 'OrderDate' && bezl.vars.sort == 'asc'\"></i>",
    "               <i class=\"fa fa-sort-numeric-desc pull-right\" aria-hidden=\"true\" ",
    "                  *ngIf=\"bezl.vars.sortCol == 'OrderDate' && bezl.vars.sort == 'desc'\"></i>",
    "             </button>",
    "              </div>",
    "              ",
    "              <div class=\"btn-group\">",
    "              <button type=\"button\"",
    "                     (click)=\"bezl.functions['sort']('OrderNum')\"",
    "                     class=\"btn btn-default\">",
    "               <span class=\"pull-left\">Order Num</span>",
    "               <i class=\"fa fa-sort-numeric-asc pull-right\" aria-hidden=\"true\" ",
    "                  *ngIf=\"bezl.vars.sortCol == 'OrderNum' && bezl.vars.sort == 'asc'\"></i>",
    "               <i class=\"fa fa-sort-numeric-desc pull-right\" aria-hidden=\"true\" ",
    "                  *ngIf=\"bezl.vars.sortCol == 'OrderNum' && bezl.vars.sort == 'desc'\"></i>",
    "             </button>",
    "\t\t\t</div>",
    "            </div>",
    "            ",
    "            <div class=\"btn-group btn-group-justified\">",
    "               <div class=\"btn-group\">",
    "                 <button type=\"button\" (click)=\"bezl.functions['sort']('PoNum')\"class=\"btn btn-default\" >",
    "               <span class=\"pull-left\">PO #</span>",
    "               <i class=\"fa fa-sort-numeric-asc pull-right\" aria-hidden=\"true\" ",
    "                  *ngIf=\"bezl.vars.sortCol == 'PoNum' && bezl.vars.sort == 'asc'\"></i>",
    "               <i class=\"fa fa-sort-numeric-desc pull-right\" aria-hidden=\"true\" ",
    "                  *ngIf=\"bezl.vars.sortCol == 'PoNum' && bezl.vars.sort == 'desc'\"></i>",
    "             </button>",
    "              </div>",
    "              <div class=\"btn-group\">",
    "             <button type=\"button\" (click)=\"bezl.functions['sort']('OrderAmt')\" class=\"btn btn-default\">",
    "               ",
    "               <span class=\"pull-left\">Order Amt</span>",
    "               <i class=\"fa fa-sort-numeric-asc pull-right\" aria-hidden=\"true\" ",
    "                  *ngIf=\"bezl.vars.sortCol == 'OrderAmt' && bezl.vars.sort == 'asc'\"></i>",
    "               <i class=\"fa fa-sort-numeric-desc pull-right\" aria-hidden=\"true\" ",
    "                  *ngIf=\"bezl.vars.sortCol == 'OrderAmt' && bezl.vars.sort == 'desc'\"></i>",
    "             </button>",
    "              </div>",
    "              </div>",
    "            ",
    "            </div>",
    "          </div>",
    "         </div>",
    "       ",
    "     </th>",
    "    </tr>",
    "   </thead>",
    "  <tbody>",
    "   <tr class=\"read\" *ngFor=\"let row of bezl.vars.Orders\">",
    "    <td>",
    "      <!-- Main row per account -->",
    "      <div class=\"row\"",
    "       (click)=\"bezl.functions['selectRow'](row)\">",
    "        <!-- Normal View -->",
    "        <div class=\"col-sm-3 hidden-xs\">",
    "          <i class=\"fa fa-chevron-right\" aria-hidden=\"true\" *ngIf=\"!row.Selected\"></i>",
    "          <i class=\"fa fa-chevron-down\" aria-hidden=\"true\" *ngIf=\"row.Selected\"></i>",
    "          {{row.OrderNum}}</div>",
    "        <div class=\"col-sm-3  hidden-xs\">{{row.OrderDate.split('T')[0] | date}}</div>",
    "        <div class=\"col-sm-3  hidden-xs\">{{row.PoNum}}</div>",
    "        <div class=\"col-sm-3  hidden-xs\" align=\"right\">{{row.OrderAmt  | currency:'USD':true:'1.2-2'}}</div>",
    "        <div hidden=\"true\" id=\"openOrder\">{{row.OpenOrder}}</div>",
    "        ",
    "        <!-- Mobile View -->",
    "        <div class=\"col-sm-3 visible-xs\">Order #: {{row.OrderNum}}</div>",
    "        <div class=\"col-sm-3  visible-xs\">Order Date: {{row.OrderDate.split('T')[0] | date}}</div>",
    "        <div class=\"col-sm-3  visible-xs\">PO #: {{row.PoNum}}</div>",
    "        <div class=\"col-sm-3  visible-xs\">Order Amt: {{row.OrderAmt  | currency:'USD':true:'1.2-2'}}</div>",
    "        <div hidden=\"true\" id=\"openOrder\">{{row.OpenOrder}}</div>",
    "        ",
    "      </div>",
    "      <!-- END: Main row per account -->",
    "      ",
    "      <!-- Drill-down view -->",
    "      <div class=\"row\" *ngIf=\"row.Selected\" style=\"margin-left:5px;margin-top:10px\">",
    "        ",
    "        <table class=\"table table-hover table-striped\">",
    "   <thead class=\"hidden-xs\">",
    "    <tr class=\"col-sm-12 bg-primary text-white\">",
    "       <!-- This is the normal button layout for a big screen.  The small layout will follow -->",
    "      <th class=\"col-sm-1\"><div class=\"bg-primary text-white\">Line #</div></th>",
    "      <th class=\"col-sm-2\"><div class=\"bg-primary text-white\">Part #</div></th>",
    "      <th class=\"col-sm-3\"><div class=\"bg-primary text-white\">Description</div></th>",
    "      <th class=\"col-sm-1\"><div class=\"bg-primary text-white\">Quantity</div></th>",
    "      <th class=\"col-sm-1\"><div class=\"bg-primary text-white\">Shipped Qty</div></th>",
    "      <th class=\"col-sm-2\"><div class=\"bg-primary text-white\">Unit Price</div></th>",
    "      <th class=\"col-sm-2\"><div class=\"bg-primary text-white\">Ext Price</div></th>",
    "     </tr>",
    "    </thead>",
    "    <thead class=\"visible-xs\">",
    "       <!-- This is the normal button layout for small screens -->",
    "     <tr>",
    "      <th>",
    "       ",
    "       <!-- This is the normal button layout for small screens -->",
    "       <div class=\"visible-xs\">",
    "\t\t<div class=\"row\">",
    "          <div class=\"col-sm-12\">",
    "         Lines:",
    "          </div>",
    "         </div>",
    "       </div>",
    "       ",
    "     </th>",
    "    </tr>",
    "   </thead>",
    "  <tbody>",
    "   <tr class=\"read\" *ngFor=\"let line of row.OrderLines\">",
    "    <td>",
    "      <!-- Main row per line -->",
    "      <div class=\"row\">",
    "        <!-- Normal View -->",
    "        <div class=\"col-sm-1 hidden-xs\">{{line.OrderLine}}</div>",
    "\t\t<div class=\"col-sm-2 hidden-xs\">{{line.PartNum}}</div>",
    "        <div class=\"col-sm-3 hidden-xs\">{{line.PartDesc}}</div>",
    "        <div class=\"col-sm-1 hidden-xs\" align=\"right\">{{line.OrderQty}}</div>",
    "        <div class=\"col-sm-1 hidden-xs\" align=\"right\">{{line.ShippedQty}}</div>",
    "        <div class=\"col-sm-2 hidden-xs\" align=\"right\">{{line.UnitPrice | currency:'USD':true:'1.2-2'}}</div>",
    "        <div class=\"col-sm-2 hidden-xs\" align=\"right\">{{line.ExtPrice | currency:'USD':true:'1.2-2'}}</div>",
    "        ",
    "        <!-- Mobile View -->",
    "        <div class=\"col-sm-1 visible-xs\"> Line #: {{line.OrderLine}}</div>",
    "\t\t<div class=\"col-sm-2 visible-xs\">Part #: {{line.PartNum}}</div>",
    "        <div class=\"col-sm-3 visible-xs\">Description: {{line.PartDesc}}</div>",
    "        <div class=\"col-sm-1 visible-xs\">Order Qty: {{line.OrderQty}}</div>",
    "        <div class=\"col-sm-1 visible-xs\">Shipped Qty: {{line.ShippedQty}}</div>",
    "        <div class=\"col-sm-2 visible-xs\">Unit Price: {{line.UnitPrice | currency:'USD':true:'1.2-2'}}</div>",
    "        <div class=\"col-sm-2 visible-xs\">Ext Price: {{line.ExtPrice | currency:'USD':true:'1.2-2'}}</div>",
    "        ",
    "      </div>",
    "        ",
    "      <!-- END: Drill-down view --> ",
    "      ",
    "     </td>",
    "   </tr>",
    "    ",
    "  </tbody>",
    "</table>",
    ""
  ],
  "functions": [
    {
      "method": "ngOnInit",
      "code": "bezl.functions['setConfig']();\nrequire([bezl.vars.config.baseJsUrl + 'onStartup.js'], function(functions) {\n\tfunctions.onStartup(bezl)\n});\n\n",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "bezl.functions['setConfig']();\r\nrequire([bezl.vars.config.baseJsUrl + 'onStartup.js'], function (functions) {\r\n    functions.onStartup(bezl);\r\n});\r\n"
    },
    {
      "method": "onDataChange",
      "code": "bezl.data = dataResp;\n\nrequire([bezl.vars.config.baseJsUrl + 'onDataChange.js'], function(functions) {\n\tfunctions.onDataChange(bezl)\n});\n",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require"
      ],
      "compiled": "bezl.data = dataResp;\r\nrequire([bezl.vars.config.baseJsUrl + 'onDataChange.js'], function (functions) {\r\n    functions.onDataChange(bezl);\r\n});\r\n"
    },
    {
      "method": "search",
      "code": "require([bezl.vars.config.baseJsUrl + 'order.js'], function(functions) {\n\tfunctions.runQuery(bezl, 'Orders')\n});\n\n",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require"
      ],
      "compiled": "require([bezl.vars.config.baseJsUrl + 'order.js'], function (functions) {\r\n    functions.runQuery(bezl, 'Orders');\r\n});\r\n"
    },
    {
      "method": "selectRow",
      "code": "require([bezl.vars.config.baseJsUrl + 'order.js'], function(functions) {\n\tfunctions.select(bezl, parm)\n});",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require"
      ],
      "compiled": "require([bezl.vars.config.baseJsUrl + 'order.js'], function (functions) {\r\n    functions.select(bezl, parm);\r\n});\r\n"
    },
    {
      "method": "sort",
      "code": "require([bezl.vars.config.baseJsUrl + 'order.js'], function(functions) {\n\tfunctions.sort(bezl, parm)\n});\n",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require"
      ],
      "compiled": "require([bezl.vars.config.baseJsUrl + 'order.js'], function (functions) {\r\n    functions.sort(bezl, parm);\r\n});\r\n"
    },
    {
      "method": "innerSort",
      "code": "require([bezl.vars.config.baseJsUrl + 'order.js'], function(functions) {\n\tfunctions.innerSort(bezl, parm)\n});\n",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require"
      ],
      "compiled": "require([bezl.vars.config.baseJsUrl + 'order.js'], function (functions) {\r\n    functions.innerSort(bezl, parm);\r\n});\r\n"
    },
    {
      "method": "filter",
      "code": "require([bezl.vars.config.baseJsUrl + 'order.js'], function(functions) {\n\tfunctions.filter(bezl)\n});\n",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require"
      ],
      "compiled": "require([bezl.vars.config.baseJsUrl + 'order.js'], function (functions) {\r\n    functions.filter(bezl);\r\n});\r\n"
    },
    {
      "method": "setConfig",
      "code": "bezl.vars.config = {};\n\n// *********************************************************************************\n// Configuration Variables\n// Only edit these if you know what you are doing.\n// version: The version number of this app. Setting this vill use the javascript\n//          include files in the corresponding \"versions\" subfolder. An empty string\n//          will use the \"development\" javascript files in the root directory.\n// libVersion: The version number of the library javascript include files to use.\n// baseUrl: The base URL of the javascript include files. Generally this should be an\n//          empty string and the correct path will be automatically determined.\n//          However, for development you may wish to point this to a RawGit URL of\n//          a specific branch (e.g. https://rawgit.com/bezlio/bezlio-apps/my-branch).\n// autoLoad: With the loading of the page, if true, the bezl will run the query for \n//          the selected customer. If false, the bezl will require a manual search \n//          to run the query. Default is false.\n// autoLoadOnSelection: With the selection of a customer (with accounts view on the same panel), \n//\t\t\tif true, the bezl will run the query for \n//          the selected customer. If false, the bezl will require a manual search \n//          to run the query. Default is true.\n\nbezl.vars.config.version = \"1.0\";\nbezl.vars.config.libVersion = \"1.0\";\nbezl.vars.config.baseUrl = \"\";\nbezl.vars.config.autoLoad = false;\nbezl.vars.config.autoLoadOnSelection = true;\n// *********************************************************************************\n\n// If the baseURL is not set above then we will determine a sane default based on the URL\nif (bezl.vars.config.baseUrl == \"\") {\n    if (window.location.href.indexOf(\"portal-dev.bezl.io\") !== -1) {\n        bezl.vars.config.baseUrl = \"https://apps-dev.bezl.io\";\n    } else {\n        bezl.vars.config.baseUrl = \"https://apps.bezl.io\";\n    }\n}\n\n// If version numbers exist above they will also be added to the javascript include URLs\nbezl.vars.config.baseJsUrl = bezl.vars.config.baseUrl\n  \t\t\t\t\t\t\t+ \"/roles/sales-rep/order-inquiry/\"\n  \t\t\t\t\t\t\t+ (bezl.vars.config.version ? \"versions/\" + bezl.vars.config.version + \"/\" : \"\")\n  \t\t\t\t\t\t\t+ \"js/\"\nbezl.vars.config.baseLibraryUrl = bezl.vars.config.baseUrl\n  \t\t\t\t\t\t\t+ \"/libraries/\"\n\t\t\t\t\t\t\t+ (bezl.vars.config.libVersion ? \"versions/\" + bezl.vars.config.libVersion + \"/\" : \"\")",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "bezl.vars.config = {};\r\n// *********************************************************************************\r\n// Configuration Variables\r\n// Only edit these if you know what you are doing.\r\n// version: The version number of this app. Setting this vill use the javascript\r\n//          include files in the corresponding \"versions\" subfolder. An empty string\r\n//          will use the \"development\" javascript files in the root directory.\r\n// libVersion: The version number of the library javascript include files to use.\r\n// baseUrl: The base URL of the javascript include files. Generally this should be an\r\n//          empty string and the correct path will be automatically determined.\r\n//          However, for development you may wish to point this to a RawGit URL of\r\n//          a specific branch (e.g. https://rawgit.com/bezlio/bezlio-apps/my-branch).\r\n// autoLoad: With the loading of the page, if true, the bezl will run the query for \r\n//          the selected customer. If false, the bezl will require a manual search \r\n//          to run the query. Default is false.\r\n// autoLoadOnSelection: With the selection of a customer (with accounts view on the same panel), \r\n//\t\t\tif true, the bezl will run the query for \r\n//          the selected customer. If false, the bezl will require a manual search \r\n//          to run the query. Default is true.\r\nbezl.vars.config.version = \"1.0\";\r\nbezl.vars.config.libVersion = \"1.0\";\r\nbezl.vars.config.baseUrl = \"\";\r\nbezl.vars.config.autoLoad = false;\r\nbezl.vars.config.autoLoadOnSelection = true;\r\n// *********************************************************************************\r\n// If the baseURL is not set above then we will determine a sane default based on the URL\r\nif (bezl.vars.config.baseUrl == \"\") {\r\n    if (window.location.href.indexOf(\"portal-dev.bezl.io\") !== -1) {\r\n        bezl.vars.config.baseUrl = \"https://apps-dev.bezl.io\";\r\n    }\r\n    else {\r\n        bezl.vars.config.baseUrl = \"https://apps.bezl.io\";\r\n    }\r\n}\r\n// If version numbers exist above they will also be added to the javascript include URLs\r\nbezl.vars.config.baseJsUrl = bezl.vars.config.baseUrl + \"/roles/sales-rep/order-inquiry/\" + (bezl.vars.config.version ? \"versions/\" + bezl.vars.config.version + \"/\" : \"\") + \"js/\";\r\nbezl.vars.config.baseLibraryUrl = bezl.vars.config.baseUrl + \"/libraries/\" + (bezl.vars.config.libVersion ? \"versions/\" + bezl.vars.config.libVersion + \"/\" : \"\");\r\n"
    },
    {
      "method": "custSelection",
      "code": "require([bezl.vars.config.baseJsUrl + 'order.js'], function(functions) {\n\tfunctions.custSelection(bezl, parm)\n});\n",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require"
      ],
      "compiled": "require([bezl.vars.config.baseJsUrl + 'order.js'], function (functions) {\r\n    functions.custSelection(bezl, parm);\r\n});\r\n"
    }
  ],
  "data": ""
}
