{
  "id": "83458848-cf46-425e-85ab-7a836607c45f",
  "name": "Trip Planner",
  "template": "custom",
  "owner": "sremington@saberlogic.com",
  "shares": [],
  "vars": [],
  "dataSubscriptions": [],
  "markup": [
    "<style>",
    "\t.input-group-btn > button { font-size: 14px; }",
    "  ",
    "  .startLocation {",
    "  \tborder: none;    ",
    "  }",
    "  ",
    "  .startLocationText {",
    "    padding-top: 3px;",
    "    padding-bottom: 3px;",
    "    height: 34px;",
    "  }",
    "  ",
    "  .btn66 {width: 66%}",
    "  .btn33 {width: 33%}",
    "</style>",
    "",
    "<div class=\"row\">",
    "  <div class=\"col-sm-12\">",
    "    <div class=\"row\">",
    "",
    "          <div class=\"col-sm-7\">",
    "            <div class=\"row\">",
    "              <div class=\"col-sm-12\">",
    "                <div class=\"panel panel-primary\">",
    "                  <div class=\"panel-heading\">",
    "                    <h3 class=\"panel-title\">Trip Details</h3>",
    "                  </div>",
    "                  <div class=\"panel-body\">",
    "                    <div class=\"row\">",
    "                      <table class=\"table\">",
    "                        <thead>",
    "                          <tr>",
    "                            <th></th>",
    "                            <th></th>",
    "                            <th>Name</th>",
    "                            <th>Address</th>",
    "                            <th></th>",
    "                          </tr>",
    "                         </thead>",
    "                        <tbody>",
    "                         <tr>",
    "                           <td>",
    "                             <button class=\"btn btn-sm btn-success mar-top\">",
    "                                <i class=\"fa fa-play-circle\" aria-hidden=\"true\"></i>",
    "                              </button>",
    "                           </td>",
    "                           <td colspan=\"4\">",
    "                             <div class=\"input-group form-control startLocation\" width=\"100%\">",
    "                              <input type=\"text\" class=\"form-control startLocationText\" onClick=\"this.setSelectionRange(0, this.value.length)\" [(ngModel)]=\"bezl.vars.currentAddress\">",
    "                              <span class=\"input-group-btn\">",
    "                                <button (click)=\"bezl.functions['updateAddress']()\" class=\"btn btn-md btn-primary\" style=\"margin-bottom:10px\">Update</button>",
    "                              </span>",
    "                            </div><!-- /input-group -->",
    "                           </td>",
    "                         </tr>",
    "                          <tr *ngFor=\"let item of bezl.vars.selectedCustomers; let i=index;\" (click)=\"bezl.functions['customerSelect'](item.key)\">",
    "                            <td>",
    "                              <button *ngIf=\"i < bezl.vars.selectedCustomers.length - 1\" (click)=\"bezl.functions['moveDown'](i)\" class=\"btn btn-sm btn-danger\">",
    "                                <i class=\"fa fa-arrow-down\" aria-hidden=\"true\"></i>",
    "                              </button>",
    "                              <button class=\"btn btn-sm btn-danger\" *ngIf=\"i >= bezl.vars.selectedCustomers.length - 1\" >",
    "                                <i class=\"fa fa-stop-circle\" aria-hidden=\"true\"></i>",
    "                              </button>",
    "                            </td>",
    "                            <td>",
    "                              <button *ngIf=\"i != 0\" (click)=\"bezl.functions['moveUp'](i)\" class=\"btn btn-sm btn-success\"><i class=\"fa fa-arrow-up\" aria-hidden=\"true\"></i></button>",
    "                            </td>",
    "                            <td>{{item.display}}</td>",
    "                            <td>{{item.address}}</td>",
    "                            <td>",
    "                              <button (click)=\"bezl.functions['customerRemove'](i)\" class=\"btn btn-sm btn-danger\"><i class=\"fa fa-times\" aria-hidden=\"true\"></i></button>",
    "                            </td>",
    "                          </tr>",
    "                        </tbody>",
    "                      </table>",
    "                    </div>",
    "                    <div class=\"row\">",
    "                      <button (click)=\"bezl.functions['navigate']()\" class=\"btn btn-md btn-primary\" [disabled]=\"bezl.vars.selectedCustomers.length == 0\">Navigate</button>",
    "                      <button (click)=\"bezl.functions['openMap']()\" class=\"btn btn-md btn-primary\" [disabled]=\"bezl.vars.selectedCustomers.length == 0\">Open Map</button>",
    "                    </div>",
    "                    ",
    "                    ",
    "                  </div>",
    "                </div>",
    "                 ",
    "              </div>",
    "            </div>",
    "            <div class=\"row\">",
    "              <div id=\"map\" class=\"map\" style=\"height: 450px; border-style: solid;\"></div>",
    "            </div>",
    "            <div class=\"row\">",
    "              <div id=\"directions\"></div>",
    "            </div>",
    "          </div>",
    "          <div class=\"col-sm-5\">",
    "            <div class=\"row\">",
    "              <div class=\"col-sm-12 form-horizontal\">",
    "                <div class=\"control-group row-fluid form-inline\">",
    "                  <label for=\"js-typeahead-customers\" class=\"control-label\">Search</label>",
    "                  <div class=\"controls\">",
    "                    <div class=\"typeahead__container\">",
    "                      <div class=\"typeahead__field\">",
    "                        <span class=\"typeahead__query\">",
    "                          <input class=\"js-typeahead-customers\" name=\"js-typeahead-customers\" type=\"search\" [(ngModel)]=\"bezl.vars.selectedCustomer.Name\"  autocomplete=\"off\">",
    "                        </span>",
    "                      </div>",
    "                    </div>",
    "                  </div>",
    "                </div>",
    "              </div>",
    "            </div>",
    "            ",
    "            <!-- Normal View -->",
    "            <div class=\"row hidden-xs\">",
    "              <table class=\"table table-hover\">",
    "                <thead>",
    "                  <tr>",
    "                    <th style=\"width:100%\">",
    "                      ",
    "                     <div class=\"btn-group btn-group-justified hidden-xs\" role=\"group\" aria-label=\"Justified button group\">",
    "                        <div class=\"btn-group btn66\" role=\"group\">",
    "                       <button type=\"button\" (click)=\"bezl.functions['sort']('Name')\" class=\"btn btn-default\" style=\"min-width: 100px\">",
    "                          <span class=\"pull-left\">Name</span>",
    "                          <i class=\"fa fa-sort-alpha-asc pull-right\" aria-hidden=\"true\" *ngIf=\"bezl.vars.sortCol != 'Name'\" style=\"visibility: hidden\"></i>",
    "                          <i class=\"fa fa-sort-alpha-asc pull-right\" aria-hidden=\"true\" *ngIf=\"bezl.vars.sortCol == 'Name' && bezl.vars.sort == 'asc'\"></i>",
    "                          <i class=\"fa fa-sort-alpha-desc pull-right\" aria-hidden=\"true\" *ngIf=\"bezl.vars.sortCol == 'Name' && bezl.vars.sort == 'desc'\"></i>",
    "                        </button>",
    "                       </div>",
    "                      ",
    "                      <div class=\"btn-group btn33\" role=\"group\">",
    "                         <button type=\"button\" (click)=\"bezl.functions['sort']('Distance')\" class=\"btn btn-default\" style=\"min-width: 100px\">",
    "                           <span class=\"pull-left\">Distance</span>",
    "                           <i class=\"fa fa-sort-numeric-asc pull-right\" aria-hidden=\"true\" *ngIf=\"bezl.vars.sortCol != 'Distance'\" style=\"visibility: hidden\"></i>",
    "                           <i class=\"fa fa-sort-numeric-asc pull-right\" aria-hidden=\"true\" *ngIf=\"bezl.vars.sortCol == 'Distance' && bezl.vars.sort == 'asc'\"></i>",
    "                           <i class=\"fa fa-sort-numeric-desc pull-right\" aria-hidden=\"true\" *ngIf=\"bezl.vars.sortCol == 'Distance' && bezl.vars.sort == 'desc'\"></i>",
    "                         </button>",
    "                       </div>",
    "                      </div>",
    "                      </th> ",
    "                  </tr>",
    "               </thead>",
    "                <tbody>",
    "                  <tr class=\"read\" *ngFor=\"let item of bezl.vars.customers\" (click)=\"bezl.functions['customerSelect'](item.key)\">",
    "                   \t<div class=\"row col-md-12\">",
    "                      <br>",
    "                      <div class=\"col-md-2\"><button (click)=\"bezl.functions['customerAdd'](item)\" class=\"btn btn-sm btn-primary\">+</button></div>",
    "                      <div class=\"col-md-6\">{{item.display}}</div>",
    "                      <div class=\"col-md-4\" align=\"right\">{{item.distance}}</div>",
    "                    </div>",
    "                  </tr>",
    "                </tbody>",
    "              </table>",
    "            </div>",
    "            ",
    "            <!-- Mobile View -->",
    "             <div class=\"row visible-xs\">",
    "              <table class=\"table table-hover\">",
    "                <thead>",
    "                  <tr>",
    "                    <h4>Sort by: </h4> ",
    "                      <div class=\"btn-group btn-group-justified\" role=\"group\" aria-label=\"Justified button group\">",
    "                        <div class=\"btn-group\" role=\"group\">",
    "                       <button type=\"button\" (click)=\"bezl.functions['sort']('Name')\"class=\"btn btn-default\" style=\"min-width: 100px\">",
    "                          <span class=\"pull-left\">Name</span>",
    "                          <i class=\"fa fa-sort-alpha-asc pull-right\" aria-hidden=\"true\" *ngIf=\"bezl.vars.sortCol != 'Name'\" style=\"visibility: hidden\"></i>",
    "                          <i class=\"fa fa-sort-alpha-asc pull-right\" aria-hidden=\"true\" *ngIf=\"bezl.vars.sortCol == 'Name' && bezl.vars.sort == 'asc'\"></i>",
    "                          <i class=\"fa fa-sort-alpha-desc pull-right\" aria-hidden=\"true\" *ngIf=\"bezl.vars.sortCol == 'Name' && bezl.vars.sort == 'desc'\"></i>",
    "                        </button>",
    "                       </div>",
    "                        ",
    "                   <div class=\"btn-group\" role=\"group\">",
    "                         <button type=\"button\" (click)=\"bezl.functions['sort']('Distance')\"class=\"btn btn-default\" style=\"min-width: 100px\">",
    "                           <span class=\"pull-left\">Distance</span>",
    "                           <i class=\"fa fa-sort-numeric-asc pull-right\" aria-hidden=\"true\" *ngIf=\"bezl.vars.sortCol != 'Distance'\" style=\"visibility: hidden\"></i>",
    "                           <i class=\"fa fa-sort-numeric-asc pull-right\" aria-hidden=\"true\" *ngIf=\"bezl.vars.sortCol == 'Distance' && bezl.vars.sort == 'asc'\"></i>",
    "                           <i class=\"fa fa-sort-numeric-desc pull-right\" aria-hidden=\"true\" *ngIf=\"bezl.vars.sortCol == 'Distance' && bezl.vars.sort == 'desc'\"></i>",
    "                         </button>",
    "                       </div>",
    "                 </div>    ",
    "                      ",
    "                 ",
    "                </tr>",
    "               </thead>",
    "                <tbody>",
    "                   <tr class=\"read\" *ngFor=\"let item of bezl.vars.customers\" (click)=\"bezl.functions['customerSelect'](item.key)\">",
    "                     <td>",
    "                      <div class=\"row col-md-12\">",
    "                        <br>",
    "                        <div>Add to trip: <button (click)=\"bezl.functions['customerAdd'](item)\" class=\"btn btn-sm btn-primary\">+</button></div>",
    "                        <div>Customer: {{item.display}}</div>",
    "                        <div>Distance: {{item.distance}} miles</div>",
    "                      </div>",
    "                     </td>",
    "                  </tr>",
    "                </tbody>",
    "              </table>",
    "            </div>",
    "  </div>",
    "</div>"
  ],
  "functions": [
    {
      "method": "ngOnInit",
      "code": "bezl.vars.currentAddress = \"\";\nbezl.vars.markers = [];\nbezl.vars.customers = [];\nbezl.vars.selectedCustomer = { \"CustNum\": 0 };\nbezl.vars.selectedCustomers = [];\nbezl.vars.loading = { \n  customerList: true\n}\n\nbezl.functions['setConfig']();\nrequire([bezl.vars.config.baseUrl + 'onStartup.js'], function(onStartup) {\n  onStartup.onStartup(bezl);\n});",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require"
      ],
      "compiled": "bezl.vars.currentAddress = \"\";\r\nbezl.vars.markers = [];\r\nbezl.vars.customers = [];\r\nbezl.vars.selectedCustomer = { \"CustNum\": 0 };\r\nbezl.vars.selectedCustomers = [];\r\nbezl.vars.loading = {\r\n    customerList: true\r\n};\r\nbezl.functions['setConfig']();\r\nrequire([bezl.vars.config.baseUrl + 'onStartup.js'], function (onStartup) {\r\n    onStartup.onStartup(bezl);\r\n});\r\n"
    },
    {
      "method": "onDataChange",
      "code": "bezl.data = dataResp;\n\nbezl.functions['setConfig']();\nrequire([bezl.vars.config.baseUrl + 'onDataChange.js'], function(onDataChange) {\n  onDataChange.onDataChange(bezl);\n});\n",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require"
      ],
      "compiled": "bezl.data = dataResp;\r\nbezl.functions['setConfig']();\r\nrequire([bezl.vars.config.baseUrl + 'onDataChange.js'], function (onDataChange) {\r\n    onDataChange.onDataChange(bezl);\r\n});\r\n"
    },
    {
      "method": "refresh",
      "code": "require([bezl.vars.config.baseUrl + 'onStartup.js'], function(customer) {\n  customer.runQuery(bezl, parm);\n});",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require"
      ],
      "compiled": "require([bezl.vars.config.baseUrl + 'onStartup.js'], function (customer) {\r\n    customer.runQuery(bezl, parm);\r\n});\r\n"
    },
    {
      "method": "updateAddress",
      "code": "require([bezl.vars.config.baseUrl + 'map.js'], function(map) {\n  map.updateAddress(bezl);\n});",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require"
      ],
      "compiled": "require([bezl.vars.config.baseUrl + 'map.js'], function (map) {\r\n    map.updateAddress(bezl);\r\n});\r\n"
    },
    {
      "method": "sort",
      "code": "require([bezl.vars.config.baseUrl + 'customer.js'], function(customer) {\n  customer.sort(bezl, parm);\n});",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require"
      ],
      "compiled": "require([bezl.vars.config.baseUrl + 'customer.js'], function (customer) {\r\n    customer.sort(bezl, parm);\r\n});\r\n"
    },
    {
      "method": "customerSelect",
      "code": "require([bezl.vars.config.baseUrl + 'customer.js'], function(customer) {\n  customer.select(bezl, parm);\n});",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require"
      ],
      "compiled": "require([bezl.vars.config.baseUrl + 'customer.js'], function (customer) {\r\n    customer.select(bezl, parm);\r\n});\r\n"
    },
    {
      "method": "customerAdd",
      "code": "require([bezl.vars.config.baseUrl + 'customer.js'], function(customer) {\n  customer.add(bezl, parm);\n});",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require"
      ],
      "compiled": "require([bezl.vars.config.baseUrl + 'customer.js'], function (customer) {\r\n    customer.add(bezl, parm);\r\n});\r\n"
    },
    {
      "method": "customerRemove",
      "code": "require([bezl.vars.config.baseUrl + 'customer.js'], function(customer) {\n  customer.remove(bezl, parm);\n});",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require"
      ],
      "compiled": "require([bezl.vars.config.baseUrl + 'customer.js'], function (customer) {\r\n    customer.remove(bezl, parm);\r\n});\r\n"
    },
    {
      "method": "moveDown",
      "code": "require([bezl.vars.config.baseUrl + 'customer.js'], function(customer) {\n  customer.move(bezl, parm, 1);\n});\n",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require"
      ],
      "compiled": "require([bezl.vars.config.baseUrl + 'customer.js'], function (customer) {\r\n    customer.move(bezl, parm, 1);\r\n});\r\n"
    },
    {
      "method": "moveUp",
      "code": "require([bezl.vars.config.baseUrl + 'customer.js'], function(customer) {\n  customer.move(bezl, parm, -1);\n});\n",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require"
      ],
      "compiled": "require([bezl.vars.config.baseUrl + 'customer.js'], function (customer) {\r\n    customer.move(bezl, parm, -1);\r\n});\r\n"
    },
    {
      "method": "setConfig",
      "code": "bezl.vars.config = {};\nbezl.vars.config.GoogleAPIKey = 'AIzaSyDdandbc5e5BYufNbdp8q8f4QKY_Dvw6xI';\n\nbezl.vars.config.baseUrl = \"\";\n// If the baseURL is not set in the line above then we will determine a sane default based on the URL\nif (bezl.vars.config.baseUrl == \"\") {\n    var tld = \"\";\n    if (window.location.href.indexOf(\"portal-dev.bezl.io\") !== -1) {\n        tld = \"https://bezlio-apps-dev.bezl.io\";\n    } else {\n        tld = \"https://bezlio-apps.bezl.io\";\n    }\n    bezl.vars.config.baseUrl = tld + \"/roles/sales-rep/trip-planner/js/\";\n}",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require"
      ],
      "compiled": "bezl.vars.config = {};\r\nbezl.vars.config.GoogleAPIKey = 'AIzaSyDdandbc5e5BYufNbdp8q8f4QKY_Dvw6xI';\r\nbezl.vars.config.baseUrl = \"\";\r\n// If the baseURL is not set in the line above then we will determine a sane default based on the URL\r\nif (bezl.vars.config.baseUrl == \"\") {\r\n    var tld = \"\";\r\n    if (window.location.href.indexOf(\"portal-dev.bezl.io\") !== -1) {\r\n        tld = \"https://bezlio-apps-dev.bezl.io\";\r\n    }\r\n    else {\r\n        tld = \"https://bezlio-apps.bezl.io\";\r\n    }\r\n    bezl.vars.config.baseUrl = tld + \"/roles/sales-rep/trip-planner/js/\";\r\n}\r\n"
    },
    {
      "method": "navigate",
      "code": "require([bezl.vars.config.baseUrl + 'map.js'], function(map) {\n  map.navigate(bezl);\n});",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require"
      ],
      "compiled": "require([bezl.vars.config.baseUrl + 'map.js'], function (map) {\r\n    map.navigate(bezl);\r\n});\r\n"
    },
    {
      "method": "openMap",
      "code": "require([bezl.vars.config.baseUrl + 'map.js'], function(map) {\n  map.openMap(bezl);\n});\n",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require"
      ],
      "compiled": "require([bezl.vars.config.baseUrl + 'map.js'], function (map) {\r\n    map.openMap(bezl);\r\n});\r\n"
    }
  ],
  "data": ""
}