{
  "id": "d5b08a86-d4c1-44ee-846a-c1d40b0006ff",
  "name": "Sales Tool - Dev - Nick",
  "template": "custom",
  "owner": "lkeilin@kaufmancontainer.com",
  "shares": [
    "Login:bputich@kaufmancontainer.com",
    "Login:eegbert@kaufmancontainer.com",
    "Login:anagale@kaufmancontainer.com",
    "Login:srobinson@kaufmancontainer.com",
    "Login:avalenta@kaufmancontainer.com",
    "Login:bputich@kaufmancontainer.com",
    "Login:kswaidner@kaufmancontainer.com",
    "Login:klahiff@kaufmancontainer.com",
    "Login:srobinson@kaufmancontainer.com",
    "Login:eegbert@kaufmancontainer.com",
    "Login:srobinson@kaufmancontainer.com",
    "Login:anagale@kaufmancontainer.com",
    "Login:avalenta@kaufmancontainer.com",
    "Login:bputich@kaufmancontainer.com",
    "Login:kswaidner@kaufmancontainer.com",
    "Login:klahiff@kaufmancontainer.com",
    "Login:eegbert@kaufmancontainer.com",
    "Login:anagale@kaufmancontainer.com"
  ],
  "vars": [
    {
      "name": "loading",
      "value": "true"
    },
    {
      "name": "editingQuote",
      "value": "false"
    },
    {
      "name": "quoteData",
      "value": "{}"
    },
    {
      "name": "lineNum",
      "value": "1"
    },
    {
      "name": "saving",
      "value": "false"
    },
    {
      "name": "addedLines",
      "value": "[]"
    },
    {
      "name": "customers",
      "value": "[{\"key\": \"\", \"display\": \"\"}]"
    },
    {
      "name": "parts",
      "value": "[]"
    },
    {
      "name": "quoteSearchCriteria",
      "value": "{}"
    },
    {
      "name": "searchingQuotes",
      "value": "false"
    },
    {
      "name": "myOpenQuotes",
      "value": "[]"
    },
    {
      "name": "deleting",
      "value": "false"
    },
    {
      "name": "textValue",
      "value": "\"\""
    },
    {
      "name": "textValue1",
      "value": "\"\""
    }
  ],
  "dataSubscriptions": [],
  "markup": [
    "<style>",
    "\ttextarea{",
    "\t\tmax-width: 100%;",
    "      \tmax-height: 100%;",
    "  }",
    "</style>",
    "",
    "<pre> {{bezl.vars['quoteData'] |json }} </pre>",
    "",
    "<div [hidden]=\"bezl.vars.editingQuote\">",
    "  <button (click)=\"bezl.functions.newQuote()\" [disabled]=\"bezl.vars.newCustomerLoading\" class=\"btn btn-md btn-primary\">New Quote</button>",
    "  <button (click)=\"bezl.functions.refresh()\" [disabled]=\"bezl.vars.newCustomerLoading\" class=\"btn btn-md btn-primary\">Refresh</button>",
    "  <button (click)=\"bezl.functions.newCustomerForm()\" [disabled]=\"bezl.vars.newCustomerLoading\" class=\"btn btn-md btn-primary\">New Customer</button>",
    "",
    "  <label class=\"pull-right\" [hidden]=\"!bezl.vars['loading']\">Loading... <i class=\"fa fa-spinner fa-spin\" style=\"font-size:24px\"></i></label>",
    "",
    "  <div class=\"panel-group\" id=\"quoteEntryAccordion\" [hidden]=\"bezl.vars['loading']\">",
    "    <!-- Section: My Open Quotes --> ",
    "    <div class=\"panel panel-default\">",
    "      <!-- Heading: My Open Quotes -->",
    "      <div class=\"panel-heading\">",
    "        <h4 class=\"panel-title\">",
    "          <a data-toggle=\"collapse\" data-parent=\"#quoteEntryAccordion\" href=\"#collapse1\">My Open Quotes</a>",
    "        </h4>",
    "      </div>",
    "",
    "      <!-- Details: My Open Quotes -->",
    "      <div id=\"collapse1\" class=\"panel-collapse collapse in\">",
    "        <div class=\"panel-body\">",
    "          <table class=\"table table-hover table-mail\">",
    "            <thead>",
    "              <tr>",
    "                <th>Quote #</th>",
    "                <th>Customer Name</th>",
    "                <th>Entry Date</th>",
    "                <th>Description</th>",
    "                <th>Status</th>",
    "                <th>Sales</th>",
    "                <th>Project Manager</th>",
    "              </tr>",
    "            </thead>",
    "            <tbody>",
    "              <tr class=\"read\" *ngFor=\"let quote of bezl.data.Quotes\" (click)=\"bezl.functions.loadExistingQuote(quote)\">",
    "                <td>{{quote.QuoteNum}}</td>",
    "                <td>{{quote.Name}}</td>",
    "                <td>{{quote.EntryDate | date}}</td>",
    "                <td>{{quote.ProjectName_c}}</td>",
    "                <td>{{quote.Decision_c}}</td>",
    "                <td>",
    "                  <input [disabled]=\"true\" type=\"checkbox\" name=\"sales\" [(ngModel)]=\"quote.Sales\">",
    "                </td>",
    "                <td>{{quote.PM}}</td>",
    "              </tr>",
    "            </tbody>",
    "          </table>",
    "        </div>",
    "      </div>",
    "    </div>  ",
    "",
    "    <!-- Section: All Open Quotes -->",
    "    <!-- <div class=\"panel panel-default\">",
    "<div class=\"panel-heading\">",
    "<h4 class=\"panel-title\">",
    "<a data-toggle=\"collapse\" data-parent=\"#quoteEntryAccordion\" href=\"#collapse2\">All Open Quotes</a>",
    "</h4>",
    "</div> -->",
    "",
    "    <!-- Details: All Open Quotes -->",
    "    <!-- <div id=\"collapse2\" class=\"panel-collapse collapse\">",
    "<div class=\"panel-body\"> ",
    "<table class=\"table table-hover table-mail\">",
    "<thead>",
    "<tr>",
    "<th>Quote #</th>",
    "<th>Customer Name</th>",
    "<th>Quote Date</th>",
    "<th>Salesperson</th>",
    "<th>Part Number</th>",
    "</tr>",
    "</thead>",
    "<tbody>",
    "<tr class=\"read\" *ngFor=\"let item of bezl.data.AllOpenQuotes\" (click)=\"bezl.functions['loadExistingQuote'](item)\">",
    "<td>{{item.QuoteNum}}</td>",
    "<td>{{item.CustomerName}}</td>",
    "<td>{{item.QuoteDate | date}}</td>",
    "<td>{{item.SalespersonID}}</td>",
    "<td>{{item.PartNum}}</td>",
    "</tr>",
    "</tbody>",
    "</table>",
    "</div>",
    "</div>",
    "</div> --> ",
    "",
    "    <!-- Section: Quote Search -->",
    "    <div class=\"panel panel-default\">",
    "      <!-- Heading: Quote Search -->",
    "      <div class=\"panel-heading\">",
    "        <h4 class=\"panel-title\">",
    "          <a data-toggle=\"collapse\" data-parent=\"#quoteEntryAccordion\" href=\"#collapse3\">Quote Search</a>",
    "        </h4>",
    "      </div>",
    "",
    "      <!-- Details: Quote Search -->",
    "      <div id=\"collapse3\" class=\"panel-collapse collapse\">",
    "        <div class=\"panel-body\"> ",
    "          <div class=\"row\">",
    "            <!-- Date range searching disabled for Excel due to weak query support on date comparisons -->",
    "            <div class=\"col-sm-7\">",
    "              <h5>Quote Date Range</h5>",
    "              <div class=\"col-sm-6\">",
    "                <div class=\"form-group\">",
    "                  <label class=\"control-label\">From</label>",
    "                  <div><p-calendar [(ngModel)]=\"bezl.vars['quoteSearchCriteria'].fromDate\"></p-calendar></div>",
    "                </div>",
    "              </div>",
    "              <div class=\"col-sm-6\">",
    "                <div class=\"form-group\">",
    "                  <label class=\"control-label\">To</label>",
    "                  <div><p-calendar [(ngModel)]=\"bezl.vars['quoteSearchCriteria'].toDate\"></p-calendar></div>",
    "                </div>",
    "              </div>",
    "            </div>",
    "            <div class=\"col-sm-5\">",
    "              <h5>Quote Number Range</h5>",
    "              <div class=\"col-sm-6\">",
    "                <div class=\"form-group\">",
    "                  <label class=\"control-label\">From</label>",
    "                  <input class=\"form-control\" type=\"number\" [(ngModel)]=\"bezl.vars['quoteSearchCriteria'].fromQuote\">",
    "                </div>",
    "              </div>",
    "              <div class=\"col-sm-6\">",
    "                <div class=\"form-group\">",
    "                  <label class=\"control-label\">To</label>",
    "                  <input class=\"form-control\" type=\"number\" [(ngModel)]=\"bezl.vars['quoteSearchCriteria'].toQuote\">",
    "                </div>",
    "              </div>",
    "            </div>",
    "          </div>",
    "",
    "          <div class=\"row\">",
    "            <div class=\"col-sm-3\">",
    "              <h5>Quote Status</h5>",
    "              <div class=\"form-group\">",
    "                <select class=\"form-control\" [(ngModel)]=\"bezl.vars['quoteSearchCriteria'].status\">",
    "                  <option value=\"OPEN\">Open</option>",
    "                  <option value=\"CLOSED\">Closed</option>",
    "                </select>",
    "              </div>",
    "            </div>",
    "            <div class=\"col-sm-4\">",
    "              <h5>Quote Result</h5>",
    "              <div class=\"form-group\">",
    "                <select class=\"form-control\" [(ngModel)]=\"bezl.vars['quoteSearchCriteria'].result\">",
    "                  <option value=\"0\">Received order</option>",
    "                  <option value=\"1\">Used our number didn't get order</option>",
    "                  <option value=\"2\">No quote</option>",
    "                  <option value=\"3\">Price too high</option>",
    "                  <option value=\"4\">Delivery too long</option>",
    "                  <option value=\"5\">No Reponse (after 3 follow ups)</option>",
    "                </select>",
    "              </div>",
    "            </div>",
    "            <div class=\"col-sm-5\">",
    "              <h5>Salesperson</h5>",
    "              <div class=\"form-group\">",
    "                <select class=\"form-control\" ",
    "                        [(ngModel)]=\"bezl.vars['quoteSearchCriteria'].salespersonId\">",
    "                  <option *ngFor=\"let person of bezl.data.Salespeople\" [value]=\"person.SalespersonID\">{{person.SalespersonName}}</option>",
    "                </select>",
    "              </div>",
    "            </div>",
    "          </div>",
    "",
    "          <div class=\"row\">",
    "            <h5>Customer</h5>",
    "            <div class=\"col-sm-12\">",
    "              <div class=\"form-group\">",
    "                <div class=\"typeahead__container\">",
    "                  <div class=\"typeahead__field\">",
    "                    <span class=\"typeahead__query\">",
    "                      <input [(ngModel)]=\"bezl.vars['quoteSearchCriteria'].customerName\" ",
    "                             class=\"js-typeahead-customer-search\" ",
    "                             type=\"search\" ",
    "                             autocomplete=\"off\">",
    "                    </span>",
    "                  </div>",
    "                </div>",
    "              </div>",
    "            </div>",
    "          </div>",
    "",
    "          <div class=\"row\">",
    "            <h5>Part Contains</h5>",
    "            <div class=\"col-sm-12\">",
    "              <div class=\"form-group\">",
    "                <input type=\"text\" [(ngModel)]=\"bezl.vars['quoteSearchCriteria'].partNum\" >",
    "              </div>",
    "            </div>",
    "          </div>",
    "",
    "          <div class=\"row\">",
    "            <button (click)=\"bezl.functions['searchQuotes']()\" class=\"btn btn-md btn-primary\" [disabled]=\"bezl.vars['searchingQuotes']\">Search</button>",
    "          </div>",
    "",
    "          <label class=\"pull-right\" [hidden]=\"!bezl.vars['searchingQuotes']\">Searching... <i class=\"fa fa-spinner fa-spin\" style=\"font-size:24px\"></i></label>",
    "",
    "          <table class=\"table table-hover table-mail\" [hidden]=\"bezl.vars['searchingQuotes']\">",
    "            <thead>",
    "              <tr>",
    "                <th>Quote #</th>",
    "                <th>Customer Name</th>",
    "                <th>Quote Date</th>",
    "                <th>Salesperson</th>",
    "                <th>Part Number</th>",
    "              </tr>",
    "            </thead>",
    "            <tbody>",
    "              <tr class=\"read\" *ngFor=\"let item of bezl.data.SearchQuotes\" (click)=\"bezl.functions['loadExistingQuote'](item)\">",
    "                <td>{{item.QuoteNum}}</td>",
    "                <td>{{item.CustomerName}}</td>",
    "                <td>{{item.QuoteDate | date}}</td>",
    "                <td>{{item.SalespersonID}}</td>",
    "                <td>{{item.PartNum}}</td>",
    "              </tr>",
    "            </tbody>",
    "          </table>",
    "",
    "        </div>",
    "      </div>",
    "    </div> ",
    "",
    "",
    "  </div>",
    "</div>",
    "",
    "<!-- Below here is the UI that is shown when editingNewQuote flips to true -->",
    "<div [hidden]=\"!bezl.vars['editingQuote']\">",
    "  <label class=\"pull-right\" [hidden]=\"!bezl.vars.saving\">Saving... <i class=\"fa fa-spinner fa-spin\" style=\"font-size:24px\"></i></label>",
    "  <label class=\"pull-right\" [hidden]=\"!bezl.vars.deleting\">Deleting... <i class=\"fa fa-spinner fa-spin\" style=\"font-size:24px\"></i></label>",
    "  <button [disabled]=\"bezl.vars.loading || bezl.vars.linesloading || bezl.vars.saving\" (click)=\"bezl.functions.back()\" class=\"btn btn-md btn-info\" [disabled]=\"bezl.vars.saving\">Back</button>",
    "  <button [disabled]=\"bezl.vars.loading || bezl.vars.linesloading || bezl.vars.saving\" (click)=\"bezl.functions.deleteQuote()\" class=\"btn btn-md btn-danger\" *ngIf=\"!bezl.vars['quoteData'].newQuote\" [disabled]=\"bezl.vars['deleting']\">Delete</button>",
    "  <button [disabled]=\"bezl.vars.loading || bezl.vars.linesloading || bezl.vars.saving\" (click)=\"bezl.functions.saveQuote()\" class=\"btn btn-md btn-primary\" [disabled]=\"bezl.vars['saving'] ",
    "                                                                                          || bezl.vars['deleting'] ",
    "                                                                                          || bezl.vars['quoteData'].quoteNum == 0",
    "                                                                                          || bezl.vars['linesLoading']",
    "                                                                                          || (bezl.vars['quoteData'].status=='CLOSED' && !bezl.vars['quoteData'].result)\">Save Quote</button>",
    "",
    "  <h4>Quote #: {{bezl.vars.quoteData.quoteNum}}</h4>",
    "  <div class=\"panel-body\">",
    "    <div class=\"row\">",
    "      <div class=\"col-sm-2\">",
    "        <div class=\"form-group\">",
    "          <label class=\"control-label\">Quote Date</label>",
    "          <div><p-calendar [disabled]=\"true\" [(ngModel)]=\"bezl.vars.quoteData.quoteDate\"></p-calendar></div>",
    "        </div>",
    "      </div>",
    "",
    "      <div class=\"col-sm-4\">",
    "        <fieldset style=\"margin: 8px; border: 1px solid silver; padding: 8px; border-radius: 4px;\">",
    "          <legend stlye=\"font-size: 12px !important;\">Quote Description</legend>",
    "          <div class=\"form-group col-sm-12\">",
    "            <label>Description</label>",
    "            <textarea class=\"boxsizingBorder\" rows=\"3\" cols=\"70\" [(ngModel)]=\"bezl.vars.quoteData.quoteDesc\"></textarea>",
    "          </div>",
    "        </fieldset>",
    "      </div>",
    "      <div class=\"col-sm-6\">",
    "        <fieldset style=\"margin: 8px; border: 1px solid silver; padding: 8px; border-radius: 4px; height:100%;\">",
    "          <legend stlye=\"font-size: 12px !important;\">Quote Information</legend>",
    "          <div class=\"form-group col-sm-4\">",
    "            <label>Sales</label>",
    "            <input style=\"margin-top: 20px; margin-bottom: 20px; margin-left: 10px; margin-right: 20px;\" type=\"checkbox\" name=\"sales\" [(ngModel)]=\"bezl.vars.quoteData.sales\">",
    "          </div>",
    "          <div class=\"col-sm-4\">",
    "            <label>Campaign</label>",
    "            <select class=\"form-control\" [ngModel]=\"bezl.vars.quoteData.mktgCamp\" (ngModelChange)=\"bezl.functions.changeMktgCamp($event)\">",
    "              <option *ngFor=\"let camp of bezl.data.MktgCamp\" [ngValue]=\"camp.MktgCampaignID\">{{camp.CampDescription}}</option>",
    "            </select>",
    "          </div>",
    "          <div class=\"col-sm-4\">",
    "            <label>Mktg Event</label>",
    "            <select class=\"form-control\" [(ngModel)]=\"bezl.vars.quoteData.mktgEvnt\">",
    "              <option *ngFor=\"let evnt of bezl.data.MktgEvnt\" [ngValue]=\"evnt.MktgEvntSeq\">{{evnt.EvntDescription}}</option>",
    "            </select>",
    "          </div>",
    "        </fieldset>",
    "      </div>",
    "      <div class=\"col-sm-4\"></div>",
    "",
    "    </div>",
    "    <div class=\"row\" style=\"margin-top: 20px;\">",
    "      <div class=\"col-sm-6\">",
    "        <div class=\"form-group\">",
    "          <label class=\"control-label\">Customer</label>",
    "          <span class=\"label label-success\" style=\"margin-right: 320px;\" *ngIf=\"bezl.vars.quoteData.newCustomer\">New</span>",
    "          <span class=\"label label-primary\" style=\"margin-right: 320px;\" *ngIf=\"!bezl.vars.quoteData.newCustomer\">Existing</span>",
    "          <label class=\"control-label\">Include Suspects</label>",
    "          <input style=\"margin:0\" type=\"checkbox\" name=\"suspects\" (change)=\"bezl.functions.includeSuspects($event)\">",
    "          <select class=\"form-control\" ",
    "                  [ngModel]=\"bezl.vars.quoteData.customerId\" (ngModelChange)=\"bezl.functions.saveCustomer($event)\">",
    "            <option *ngFor=\"let cust of bezl.data.Customers\" [value]=\"cust.CustID\">{{cust.Name}}</option>",
    "          </select>",
    "        </div>",
    "      </div>",
    "      <div class=\"col-sm-6\">",
    "        <div class=\"form-group\">",
    "          <label class=\"control-label\">Salesperson</label>",
    "          <select class=\"form-control\" [disabled]=\"true\"",
    "                  [(ngModel)]=\"bezl.vars.quoteData.salespersonId\" ",
    "                  [disabled]=\"bezl.vars.quoteData.status=='CLOSED'\">",
    "            <option *ngFor=\"let person of bezl.data.SalesReps\" [value]=\"person.SalesRepCode\">{{person.Name}}</option>",
    "          </select>",
    "        </div>",
    "      </div>",
    "    </div>",
    "    <div class=\"row\">",
    "      <div class=\"col-sm-12\">",
    "        <div class=\"form-group\">",
    "          <button [disabled]=\"bezl.vars.loading || bezl.vars.linesloading || bezl.vars.saving\" (click)=\"bezl.functions.addQuoteLine()\" ",
    "                  class=\"btn btn-md btn-primary\" ",
    "                  [disabled]=\"bezl.vars.quoteData.status=='CLOSED' || bezl.vars.loading || bezl.vars.linesloading || bezl.vars.saving\">Add Line</button>",
    "        </div>",
    "      </div>",
    "    </div>",
    "",
    "    <label class=\"pull-right\" [hidden]=\"!bezl.vars.linesloading\">Loading... <i class=\"fa fa-spinner fa-spin\" style=\"font-size:24px\"></i></label>",
    "",
    "    <div class=\"row\">",
    "      <div class=\"col-sm-12\">",
    "        <div class=\"form-group\">",
    "          <table [hidden]=\"bezl.vars.linesLoading\">",
    "            <thead>",
    "              <tr>",
    "                <th></th>",
    "                <th class=\"col-sm-1\"><label style=\"padding-left:5px\">Delete</label></th> ",
    "                <th class=\"col-sm-1\"><label style=\"padding-left:5px\">Line</label></th> ",
    "                <th class=\"col-sm-1\"><label style=\"padding-left:5px\">Standard Part</label></th>",
    "                <th class=\"col-sm-6\"><label style=\"padding-left:5px\">Part</label></th>",
    "                <th class=\"col-sm-2\"><label style=\"padding-left:5px\">Qty</label></th>",
    "                <th class=\"col-sm-2\"><label style=\"padding-left:5px\">UOM</label></th>",
    "                <th class=\"col-sm-1\"><label style=\"padding-left:5px\">Configure</label></th>",
    "              </tr>",
    "            </thead>",
    "          </table>",
    "          ",
    "          <table *ngFor=\"let line of bezl.data.QuoteDtls\">",
    "            <tr *ngIf=\"!line.Deleted\">",
    "              <td class=\"col-sm-1\">",
    "                <button (click)=\"bezl.functions.deleteLine(line.QuoteLine)\" class=\"note-btn btn btn-default btn-sm note-btn-bold\" title=\"Delete Line\"",
    "                        [disabled]=\"bezl.vars['quoteData'].status=='CLOSED'\"><i class=\"fa fa-times fa-lg\"></i></button>",
    "              </td>",
    "              <td class=\"col-sm-1\">",
    "                {{line.QuoteLine}}",
    "              </td>",
    "              <td class=\"col-sm-1\"> ",
    "                <input style=\"margin-left: 25px\" type=\"checkbox\" name=\"custom\" [ngModel]=\"line.ListItem\" (ngModelChange)=\"bezl.functions.changeStandardPart(line.QuoteLine)\">",
    "              </td>",
    "              <td class=\"col-sm-6\">",
    "                <select *ngIf=\"line.ListItem\" class=\"form-control\" [ngModel]=\"line.PartNum\" (ngModelChange)=\"bezl.functions.changePart({'Line': line.QuoteLine, 'Event': $event})\">",
    "                  <option *ngFor=\"let part of bezl.vars.parts\" [ngValue]=\"part.PART_DESCRIPTION\">{{part.PART_DESCRIPTION}}</option>",
    "                </select>",
    "                <div *ngIf=\"!line.ListItem\" class=\"typeahead__container\">",
    "                  <div class=\"typeahead__field\">",
    "                    <span class=\"typeahead__query\">",
    "                      <input class=\"partNum{{line.QuoteLine}}\" name=\"partNum{{line.QuoteLine}}\" type=\"search\" autocomplete=\"off\" [(ngModel)]=\"line.PartNum\">",
    "                    </span>",
    "                  </div>",
    "                </div>",
    "              </td>",
    "              <td class=\"col-sm-2\">",
    "                <input class=\"form-control\" type=\"number\" [(ngModel)]=\"line.OrderQty\" [disabled]=\"bezl.vars['quoteData'].status=='CLOSED'\">",
    "              </td>",
    "              <td class=\"col-sm-2\">",
    "                <select class=\"form-control\" [(ngModel)]=\"line.SellingExpectedUM\" [disabled]=\"bezl.vars['quoteData'].status=='CLOSED'\">",
    "                  <option value=\"IN\">IN</option>",
    "                  <option value=\"EA\">EA</option>",
    "                  <option value=\"LB\">LB</option>",
    "                </select>",
    "              </td>",
    "              <td class=\"col-sm-1\">",
    "                <button type=\"button\" class=\"btn btn-default\" (click)=\"bezl.functions.configLine(line)\"",
    "                        [disabled]=\"bezl.vars.loading || bezl.vars.linesloading || bezl.vars.saving || bezl.vars.updatingAttributes || bezl.vars.attrLoading\">Configure</button>",
    "              </td>",
    "            </tr>",
    "",
    "            <tr *ngIf=\"line.ListItem && !line.Deleted\" [hidden]=\"!line.Display\">",
    "              <td class=\"col-sm-1\">",
    "                <tr><label class=\"pull-right\" [hidden]=\"!bezl.vars.attrLoading\">Loading... <i class=\"fa fa-spinner fa-spin\" style=\"font-size:24px\"></i></label></tr>",
    "              </td>",
    "              <td colspan=\"3\" [hidden]=\"bezl.vars.attrLoading\">",
    "                <tr *ngFor=\"let attr of line.Attributes\">",
    "                  <button type=\"button\" class=\"btn btn-default\" (click)=\"bezl.functions.showAttrValues({'QuoteLine': line.QuoteLine, 'AttributeID': attr.ATTRIBUTE_ID})\">{{attr.ATTRIBUTE_DESCRIPTION}}</button>",
    "                  <table [hidden]=\"!attr.Display\">",
    "                    <tr *ngFor=\"let val of attr.ATTRIBUTE_VALUES\">",
    "                      <td *ngIf=\"!attr.hasOwnProperty('SELECTION_MODE') && val.Display && attr.ATTRIBUTE_ID.indexOf('MEASURE') === -1\">",
    "                        <div class=\"radio\">",
    "                          <label>",
    "                            <input type=\"radio\" name=\"{{line.QuoteLine}}{{attr.ATTRIBUTE_ID}}\" ",
    "                                   [ngModel]=\"attr.SELECTED_VALUE\" (ngModelChange)=\"bezl.functions.changeAttr({'QuoteLine': line.QuoteLine, 'AttributeID': attr.ATTRIBUTE_ID, 'Event': $event})\"",
    "                                   value=\"{{val.ATTRIBUTE_VALUE}}\"> ",
    "                            {{val.ATTRIBUTE_VALUE_LABEL}}",
    "                            <textarea rows=\"3\" class=\"form-control\" type=\"text\" [ngModel]=\"val.SELECTED_VALUE\" (ngModelChange)=\"bezl.functions.changeTypedAttr({'QuoteLine': line.QuoteLine, 'AttributeID': attr.ATTRIBUTE_ID, 'SelectedAttribute': val.ATTRIBUTE_VALUE_LABEL, 'Event': $event, 'ValueID': val.ATTRIBUTE_VALUE})\" *ngIf=\"val.hasOwnProperty('EDITABLE')\"></textarea>",
    "                          </label>",
    "                        </div>",
    "                      </td>",
    "                      <td *ngIf=\"attr.ATTRIBUTE_ID === '000_QUANTITY'\">",
    "                        <div *ngIf=\"val.hasOwnProperty('EDITABLE')\">",
    "                          <label>",
    "                            <input type=\"checkbox\" name=\"{{val.ATTRIBUTE_VALUE_LABEL}}\" [checked]=\"val.SELECTED_VALUE > 0\">",
    "                            {{val.ATTRIBUTE_VALUE_LABEL}}",
    "                            <input class=\"form-control\" type=\"number\" [(ngModel)]=\"val.SELECTED_VALUE\">",
    "                          </label>",
    "                        </div>",
    "                      </td>",
    "                      <td *ngIf=\"attr.ATTRIBUTE_ID.indexOf('MEASURE') > -1\">",
    "                        <div *ngIf=\"val.hasOwnProperty('EDITABLE') && val.Display\">",
    "                          <label>",
    "                            <input type=\"radio\" name=\"{{val.ATTRIBUTE_VALUE_LABEL}}\" ",
    "                                   [ngModel]=\"attr.SELECTED_VALUE\" (ngModelChange)=\"bezl.functions.changeAttr({'QuoteLine': line.QuoteLine, 'AttributeID': attr.ATTRIBUTE_ID, 'Event': $event})\"",
    "                                   value=\"{{val.ATTRIBUTE_VALUE}}\">",
    "                            {{val.ATTRIBUTE_VALUE_LABEL}}",
    "                            <input class=\"form-control\" type=\"number\" [ngModel]=\"val.SELECTED_VALUE\" (ngModelChange)=\"bezl.functions.changeTypedAttr({'QuoteLine': line.QuoteLine, 'AttributeID': attr.ATTRIBUTE_ID, 'SelectedAttribute': val.ATTRIBUTE_VALUE_LABEL, 'Event': $event})\">",
    "                          </label>",
    "                        </div>",
    "                      </td>",
    "                      ",
    "                      <td *ngIf=\"attr.SELECTION_MODE === 'Multiple' && (attr.ATTRIBUTE_ID !== '000_QUANTITY' && attr.ATTRIBUTE_ID.indexOf('MEASURE') === -1)\">",
    "                        <div class=\"checkbox\" *ngIf=\"!val.hasOwnProperty('EDITABLE')\">",
    "                          <label>",
    "                            <input type=\"checkbox\" name=\"{{val.ATTRIBUTE_VALUE_LABEL}}\" ",
    "                                   [(ngModel)]=\"val.SELECTED_VALUE\"",
    "                                   value=\"{{val.SELECTED_VALUE}}\">",
    "                            {{val.ATTRIBUTE_VALUE_LABEL}}",
    "                            <textarea rows=\"3\" class=\"form-control\" type=\"text\" [(ngModel)]=\"val.SELECTED_VALUE\" *ngIf=\"val.hasOwnProperty('EDITABLE')\"></textarea>",
    "                          </label>",
    "                        </div>",
    "                        <div class=\"checkbox\" *ngIf=\"val.hasOwnProperty('EDITABLE')\">",
    "                          <label>",
    "                            <input type=\"checkbox\" name=\"{{val.ATTRIBUTE_VALUE_LABEL}}\" ",
    "                                   [checked]=\"val.SELECTED_VALUE !== '' && val.hasOwnProperty('SELECTED_VALUE')\">",
    "                            {{val.ATTRIBUTE_VALUE_LABEL}}",
    "                            <textarea rows=\"3\" class=\"form-control\" type=\"text\" [(ngModel)]=\"val.SELECTED_VALUE\" *ngIf=\"val.hasOwnProperty('EDITABLE')\"></textarea>",
    "                          </label>",
    "                        </div>",
    "                      </td>",
    "                      ",
    "                      <div *ngIf=\"val.hasOwnProperty('SUB_ATTRIBUTE')\" style=\"padding-left: 50px\">",
    "                        <hr>",
    "                        <td colspan=\"3\">",
    "                          <div *ngFor=\"let subAttr of val.SUB_ATTRIBUTE\">",
    "                            <div *ngFor=\"let subAttrVal of subAttr.ATTRIBUTE_VALUES\">",
    "                              <!--no selection mode - single radio-->",
    "                                <td *ngIf=\"!subAttr.hasOwnProperty('SELECTION_MODE') && subAttr.ATTRIBUTE_ID.indexOf('MEASURE') === -1\">",
    "                                    <div class=\"radio\">",
    "                                        <label>",
    "                                            <input type=\"radio\" name=\"{{line.QuoteLine}}{{attr.ATTRIBUTE_ID}}{{subAttr.ATTRIBUTE_ID}}\" [ngModel]=\"subAttr.SELECTED_VALUE\" (ngModelChange)=\"bezl.functions.changeSubAttr({'QuoteLine': line.QuoteLine, 'AttributeID': attr.ATTRIBUTE_ID, 'SelectedAttribute': val.ATTRIBUTE_VALUE_LABEL, 'SubAttributeID': subAttr.ATTRIBUTE_ID, 'Event': $event})\"",
    "                                                value=\"{{subAttrVal.ATTRIBUTE_VALUE}}\">{{subAttr.ATTRIBUTE_DESCRIPTION}} - {{subAttrVal.ATTRIBUTE_VALUE_LABEL}}",
    "                                            <textarea rows=\"3\" class=\"form-control\" type=\"text\" [ngModel]=\"subAttrVal.SELECTED_VALUE\" (ngModelChange)=\"bezl.functions.changeTypedSubAttr({'QuoteLine': line.QuoteLine, 'AttributeID': attr.ATTRIBUTE_ID, 'SubAttributeID': subAttr.ATTRIBUTE_ID, 'SelectedAttribute': val.ATTRIBUTE_VALUE_LABEL, 'Event': $event, 'ValueID': subAttrVal.ATTRIBUTE_VALUE})\"",
    "                                                *ngIf=\"subAttrVal.hasOwnProperty('EDITABLE')\"></textarea>",
    "                                        </label>",
    "                                    </div>",
    "                                </td>",
    "",
    "                                <!--selection mode = multi-->",
    "                                <td *ngIf=\"subAttr.SELECTION_MODE === 'Multiple'\">",
    "                                    <div class=\"checkbox\" *ngIf=\"!subAttrVal.hasOwnProperty('EDITABLE')\">",
    "                                        <label>",
    "                                            <input type=\"checkbox\" name=\"{{subAttrVal.ATTRIBUTE_VALUE_LABEL}}\" [(ngModel)]=\"subAttrVal.SELECTED_VALUE\" value=\"{{subAttrVal.SELECTED_VALUE}}\">{{subAttr.ATTRIBUTE_DESCRIPTION}} - {{subAttrVal.ATTRIBUTE_VALUE_LABEL}}",
    "                                            <textarea rows=\"3\" class=\"form-control\" type=\"text\" [(ngModel)]=\"subAttrVal.SELECTED_VALUE\" *ngIf=\"subAttrVal.hasOwnProperty('EDITABLE')\"></textarea>",
    "                                        </label>",
    "                                    </div>",
    "                                    <div class=\"checkbox\" *ngIf=\"subAttrVal.hasOwnProperty('EDITABLE')\">",
    "                                        <label>",
    "                                            <input type=\"checkbox\" name=\"{{subAttrVal.ATTRIBUTE_VALUE_LABEL}}\" [checked]=\"subAttrVal.SELECTED_VALUE !== '' && subAttrVal.hasOwnProperty('SELECTED_VALUE')\"> {{subAttr.ATTRIBUTE_DESCRIPTION}} - {{subAttrVal.ATTRIBUTE_VALUE_LABEL}}",
    "                                            <textarea rows=\"3\" class=\"form-control\" type=\"text\" [(ngModel)]=\"subAttrVal.SELECTED_VALUE\" *ngIf=\"subAttrVal.hasOwnProperty('EDITABLE')\"></textarea>",
    "                                        </label>",
    "                                    </div>",
    "                                </td>",
    "                            </div>                            ",
    "                          </div>",
    "                        </td>                        ",
    "                      </div>",
    "                      ",
    "                    </tr>",
    "                  </table>",
    "                </tr>",
    "              </td>",
    "            </tr>",
    "            <tr *ngIf=\"!line.ListItem\" [hidden]=\"!line.Display\">",
    "              <td class=\"col-sm-1\"></td>",
    "              <td colspan=\"4\">",
    "                <div class=\"row\">",
    "                  <div class=\"col-sm-12\">",
    "                    <div class=\"form-group\">",
    "                      <label class=\"control-label\">Line Comments</label>",
    "                      <textarea rows=\"4\" class=\"form-control\" [(ngModel)]=\"line.LineComment\"></textarea>",
    "                    </div>",
    "                  </div>",
    "                </div>",
    "              </td>",
    "            </tr>",
    "          </table>",
    "",
    "          <label class=\"pull-right\" *ngIf=\"bezl.vars['linesLoading']\">Loading Lines... <i class=\"fa fa-spinner fa-spin\" style=\"font-size:24px\"></i></label>",
    "        </div>",
    "      </div>",
    "    </div>",
    "    <div class=\"row\">",
    "      <div class=\"col-sm-12\">",
    "        <div class=\"form-group\">",
    "          <label class=\"control-label\">Notes to PM</label>",
    "          <textarea rows=\"4\" class=\"form-control\" [(ngModel)]=\"bezl.vars['quoteData'].comments\"></textarea>",
    "        </div>",
    "      </div>",
    "    </div>",
    "  </div>  ",
    "</div>",
    "",
    "<!-- Prime NG dialog module, http://www.primefaces.org/primeng/#/dialog for more info -->",
    "<p-dialog header=\"New Customer Form\" [(visible)]=\"bezl.vars.dialogVisible\" [modal]=\"true\" appendTo=\"body\">",
    "  <label class=\"control-label\">Customer Name</label>",
    "  <input type=\"text\" class=\"form-control\" [(ngModel)]=\"bezl.vars.newCustomerName\">",
    "",
    "  <label class=\"control-label\">Address</label>",
    "  <input type=\"text\" class=\"form-control\" [(ngModel)]=\"bezl.vars.newCustomerAddress\">",
    "",
    "  <label class=\"control-label\">City</label>",
    "  <input type=\"text\" class=\"form-control\" [(ngModel)]=\"bezl.vars.newCustomerCity\">",
    "",
    "  <label class=\"control-label\">State</label>",
    "  <input type=\"text\" class=\"form-control\" [(ngModel)]=\"bezl.vars.newCustomerState\">",
    "",
    "  <label class=\"control-label\">Zip</label>",
    "  <input type=\"text\" class=\"form-control\" [(ngModel)]=\"bezl.vars.newCustomerZip\">",
    "",
    "  <label class=\"control-label\">Country</label>",
    "  <input type=\"text\" class=\"form-control\" [(ngModel)]=\"bezl.vars.newCustomerCountry\">",
    "",
    "  <label class=\"control-label\">Territory</label>",
    "  <select type=\"text\" class=\"form-control\" [(ngModel)]=\"bezl.vars.newCustomerTer\">",
    "    <option *ngFor=\"let salesTer of bezl.data.Territories\" [value]=\"salesTer.TerritoryID\">{{salesTer.TerritoryDesc}}</option>",
    "  </select>",
    "",
    "  <!--label class=\"control-label\">Terms</label>",
    "<select type=\"text\" class=\"form-control\" [(ngModel)]=\"bezl.vars.newCustomerTerms\">",
    "<option *ngFor=\"let terms of bezl.data.Terms\" [value]=\"terms.TermsCode\">{{terms.TermsDesc}}</option>",
    "</select-->",
    "",
    "  <button style=\"margin-top: 20px\" (click)=\"bezl.functions.newCustomer()\" class=\"btn btn-md btn-primary\">Save Customer</button>",
    "</p-dialog>"
  ],
  "functions": [
    {
      "method": "ngOnInit",
      "code": "bezl.vars.loading = true;\nbezl.vars.Connection = 'Epicor Production';\nbezl.vars.Company = 'KCC';\nbezl.vars.CustomerCustID = '';\nbezl.vars.MktgEvent = 'Default';\nbezl.vars.ds = {};\nbezl.vars.jsUrl = \"https://rawgit.com/bezlio/bezlio-apps/kaufman-salesTool-NotesToPM/roles/sales-rep/quote-entry/js/\";\nbezl.vars.jsonUrl = \"https://rawgit.com/bezlio/bezlio-apps/development/roles/sales-rep/quote-entry/json/\";\nbezl.vars.libraryUrl = \"https://rawgit.com/bezlio/bezlio-apps/kaufman-salesTool-NotesToPM/libraries/epicor/\";\n\nrequire([bezl.vars.jsUrl + 'onStartup.js'], function(functions) {\n\tfunctions.onStartup(bezl);\n});",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "bezl.vars.loading = true;\r\nbezl.vars.Connection = 'Epicor Production';\r\nbezl.vars.Company = 'KCC';\r\nbezl.vars.CustomerCustID = '';\r\nbezl.vars.MktgEvent = 'Default';\r\nbezl.vars.ds = {};\r\nbezl.vars.jsUrl = \"https://rawgit.com/bezlio/bezlio-apps/kaufman-salesTool-NotesToPM/roles/sales-rep/quote-entry/js/\";\r\nbezl.vars.jsonUrl = \"https://rawgit.com/bezlio/bezlio-apps/development/roles/sales-rep/quote-entry/json/\";\r\nbezl.vars.libraryUrl = \"https://rawgit.com/bezlio/bezlio-apps/kaufman-salesTool-NotesToPM/libraries/epicor/\";\r\nrequire([bezl.vars.jsUrl + 'onStartup.js'], function (functions) {\r\n    functions.onStartup(bezl);\r\n});\r\n"
    },
    {
      "method": "onDataChange",
      "code": "bezl.data = dataResp;\nif(bezl.data.newQuote)\nconsole.log(bezl.data.newQuote);\nif(bezl.data.Quotes)\nconsole.log(bezl.data.Quotes);\nrequire([bezl.vars.jsUrl + 'onDataChange.js'], function(functions) {\n\tfunctions.onDataChange(bezl);\n});",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "bezl.data = dataResp;\r\nif (bezl.data.newQuote)\r\n    console.log(bezl.data.newQuote);\r\nif (bezl.data.Quotes)\r\n    console.log(bezl.data.Quotes);\r\nrequire([bezl.vars.jsUrl + 'onDataChange.js'], function (functions) {\r\n    functions.onDataChange(bezl);\r\n});\r\n"
    },
    {
      "method": "newQuote",
      "code": "bezl.vars.loading = true;\n\nrequire([bezl.vars.libraryUrl + 'quote.js'], function(quote) {\n  quote.newQuote(bezl, bezl.vars.Connection, bezl.vars.Company, bezl.vars.CustomerCustID);\n});",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "bezl.vars.loading = true;\r\nrequire([bezl.vars.libraryUrl + 'quote.js'], function (quote) {\r\n    quote.newQuote(bezl, bezl.vars.Connection, bezl.vars.Company, bezl.vars.CustomerCustID);\r\n});\r\n"
    },
    {
      "method": "refresh",
      "code": "require([bezl.vars.jsUrl + 'quote.js'], function(functions) {\n\tfunctions.runQuery(bezl, \"Quotes\");\n});\n",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "require([bezl.vars.jsUrl + 'quote.js'], function (functions) {\r\n    functions.runQuery(bezl, \"Quotes\");\r\n});\r\n"
    },
    {
      "method": "back",
      "code": "require([bezl.vars.jsUrl + 'quote.js'], function(functions) {\n\tfunctions.returnToSummary(bezl);\n});\n\nbezl.functions.refresh();",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "require([bezl.vars.jsUrl + 'quote.js'], function (functions) {\r\n    functions.returnToSummary(bezl);\r\n});\r\nbezl.functions.refresh();\r\n"
    },
    {
      "method": "addQuoteLine",
      "code": "require([bezl.vars.jsUrl + 'quote.js'], function(functions) {\n\tfunctions.addLine(bezl);\n});",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "require([bezl.vars.jsUrl + 'quote.js'], function (functions) {\r\n    functions.addLine(bezl);\r\n});\r\n"
    },
    {
      "method": "deleteLine",
      "code": "require([bezl.vars.jsUrl + 'quote.js'], function(functions) {\n\tfunctions.deleteLine(bezl, parm);\n});",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "require([bezl.vars.jsUrl + 'quote.js'], function (functions) {\r\n    functions.deleteLine(bezl, parm);\r\n});\r\n"
    },
    {
      "method": "saveQuote",
      "code": "bezl.vars.saving = true;\n\nrequire([bezl.vars.libraryUrl + 'quote.js'], function(quote) {\n  quote.saveQuote(bezl, bezl.vars.Connection, bezl.vars.Company, bezl.vars.MktgEvent, bezl.vars.quoteData);\n});",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "bezl.vars.saving = true;\r\nrequire([bezl.vars.libraryUrl + 'quote.js'], function (quote) {\r\n    quote.saveQuote(bezl, bezl.vars.Connection, bezl.vars.Company, bezl.vars.MktgEvent, bezl.vars.quoteData);\r\n});\r\n"
    },
    {
      "method": "getOpenQuotes",
      "code": "// Call the GetAllOpenQuotes query to pull in all of the open quotes.  If you do not wish to\n// permit this, just remove this call and they will not fill in\nbezl.dataService.add('AllOpenQuotes'\n                     ,'brdb'\n                     ,'SQLServer'\n                     ,'ExecuteQuery'\n                     ,\n                     { \"Context\": \"QuoteEntry\"\n                      , \"Connection\": \"VMFG\"\n                      , \"QueryName\": \"GetAllOpenQuotes\"\n                      , \"Parameters\": [] \n                     }\n                     ,0);",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require"
      ],
      "compiled": "var require; // Call the GetAllOpenQuotes query to pull in all of the open quotes.  If you do not wish to\r\n// permit this, just remove this call and they will not fill in\r\nbezl.dataService.add('AllOpenQuotes', 'brdb', 'SQLServer', 'ExecuteQuery', { \"Context\": \"QuoteEntry\", \"Connection\": \"VMFG\", \"QueryName\": \"GetAllOpenQuotes\", \"Parameters\": [] }, 0);\r\n"
    },
    {
      "method": "setNewQuoteDefaults",
      "code": "bezl.vars['lineNum'] = 0;\n\n// Set new quote data defaults\nbezl.vars['quoteData'] = {\n  newQuote: true,\n  quoteNum: 0,\n  quoteDate: new Date(),\n  salespersonId: bezl.env.currentUser,\n  customerId: '',\n  customerName: '',\n  newCustomer: true,\n  comments: '',\n  status: 'OPEN',\n  result: '',\n  quoteLines: []\n};\n\n// Clear variables used to keep track of added lines\nbezl.vars['addedLines'] = [];",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require"
      ],
      "compiled": "bezl.vars['lineNum'] = 0;\r\n// Set new quote data defaults\r\nbezl.vars['quoteData'] = {\r\n    newQuote: true,\r\n    quoteNum: 0,\r\n    quoteDate: new Date(),\r\n    salespersonId: bezl.env.currentUser,\r\n    customerId: '',\r\n    customerName: '',\r\n    newCustomer: true,\r\n    comments: '',\r\n    status: 'OPEN',\r\n    result: '',\r\n    quoteLines: []\r\n};\r\n// Clear variables used to keep track of added lines\r\nbezl.vars['addedLines'] = [];\r\n"
    },
    {
      "method": "loadExistingQuote",
      "code": "require([bezl.vars.jsUrl + 'quote.js'], function(functions) {\n  \tfunctions.loadQuote(bezl, parm);  \n\tfunctions.runQuery(bezl, \"QuoteDtls\");\n});",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "require([bezl.vars.jsUrl + 'quote.js'], function (functions) {\r\n    functions.loadQuote(bezl, parm);\r\n    functions.runQuery(bezl, \"QuoteDtls\");\r\n});\r\n"
    },
    {
      "method": "customerSelect",
      "code": "// This function will get called when an existing customer is selected from the customer drop-down.  When this\n// happens we can set the customerId, customerName, and flip the newCustomerFlag to false.\nbezl.vars['quoteData'].customerId = parm.key;\nbezl.vars['quoteData'].customerName = parm.display;\nbezl.vars['quoteData'].newCustomer = false;",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require"
      ],
      "compiled": "var require; // This function will get called when an existing customer is selected from the customer drop-down.  When this\r\n// happens we can set the customerId, customerName, and flip the newCustomerFlag to false.\r\nbezl.vars['quoteData'].customerId = parm.key;\r\nbezl.vars['quoteData'].customerName = parm.display;\r\nbezl.vars['quoteData'].newCustomer = false;\r\n"
    },
    {
      "method": "partSelect",
      "code": "// Update the quoteData object for the specified line\nfor (var i = 0; i < bezl.vars['quoteData'].quoteLines.length; i++) {\n\tif (bezl.vars['quoteData'].quoteLines[i].lineNum == parm.lineNum) {\n     \tbezl.vars['quoteData'].quoteLines[i].partNum = parm.key;\n      \tbezl.vars['quoteData'].quoteLines[i].partDesc = parm.display;\n    }\n};",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require"
      ],
      "compiled": "var require; // Update the quoteData object for the specified line\r\nfor (var i = 0; i < bezl.vars['quoteData'].quoteLines.length; i++) {\r\n    if (bezl.vars['quoteData'].quoteLines[i].lineNum == parm.lineNum) {\r\n        bezl.vars['quoteData'].quoteLines[i].partNum = parm.key;\r\n        bezl.vars['quoteData'].quoteLines[i].partDesc = parm.display;\r\n    }\r\n}\r\n;\r\n"
    },
    {
      "method": "searchQuotes",
      "code": "var dateToString = function(d) {\n  \tif (d != null) {\n      var curr_date = d.getDate();\n      var curr_month = d.getMonth() + 1; //Months are zero based\n      var curr_year = d.getFullYear();\n      console.log(curr_month + \"/\" + curr_date + \"/\" + curr_year);\n      return curr_month + \"/\" + curr_date + \"/\" + curr_year;\n    } else {\n     return null; \n    }\n};\n\nbezl.dataService.add('SearchQuotes'\n                     ,'brdb'\n                     ,'SQLServer'\n                     ,'ExecuteQuery'\n                     ,\n                     { \"Context\": \"QuoteEntry\"\n                      , \"Connection\": \"VMFG\"\n                      , \"QueryName\": \"GetQuotesByQuery\"\n                      , \"Parameters\": [\n                        \t{ \"Key\": \"FromQuote\", \"Value\": bezl.vars['quoteSearchCriteria'].fromQuote || 1 },\n                        \t{ \"Key\": \"ToQuote\", \"Value\": bezl.vars['quoteSearchCriteria'].toQuote || 99999999 },\n                        \t{ \"Key\": \"Status\", \"Value\": bezl.vars['quoteSearchCriteria'].status || '' },\n                        \t{ \"Key\": \"FromDate\", \"Value\": dateToString(bezl.vars['quoteSearchCriteria'].fromDate) || '1/1/1900' },\n                        \t{ \"Key\": \"ToDate\", \"Value\": dateToString(bezl.vars['quoteSearchCriteria'].toDate) || '12/31/2099' },\n                        \t{ \"Key\": \"CustomerName\", \"Value\": bezl.vars['quoteSearchCriteria'].customerName || '' },\n                        \t{ \"Key\": \"Result\", \"Value\": bezl.vars['quoteSearchCriteria'].result || '' },\n                        \t{ \"Key\": \"SalespersonID\", \"Value\": bezl.vars['quoteSearchCriteria'].salespersonId || '' },\n                        \t{ \"Key\": \"PartNum\", \"Value\": bezl.vars['quoteSearchCriteria'].partNum || '' }\n                      \t] \n                     }\n                     ,0);\n\nbezl.vars['searchingQuotes'] = true;",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require"
      ],
      "compiled": "var dateToString = function (d) {\r\n    if (d != null) {\r\n        var curr_date = d.getDate();\r\n        var curr_month = d.getMonth() + 1; //Months are zero based\r\n        var curr_year = d.getFullYear();\r\n        console.log(curr_month + \"/\" + curr_date + \"/\" + curr_year);\r\n        return curr_month + \"/\" + curr_date + \"/\" + curr_year;\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n};\r\nbezl.dataService.add('SearchQuotes', 'brdb', 'SQLServer', 'ExecuteQuery', { \"Context\": \"QuoteEntry\", \"Connection\": \"VMFG\", \"QueryName\": \"GetQuotesByQuery\", \"Parameters\": [\r\n    { \"Key\": \"FromQuote\", \"Value\": bezl.vars['quoteSearchCriteria'].fromQuote || 1 },\r\n    { \"Key\": \"ToQuote\", \"Value\": bezl.vars['quoteSearchCriteria'].toQuote || 99999999 },\r\n    { \"Key\": \"Status\", \"Value\": bezl.vars['quoteSearchCriteria'].status || '' },\r\n    { \"Key\": \"FromDate\", \"Value\": dateToString(bezl.vars['quoteSearchCriteria'].fromDate) || '1/1/1900' },\r\n    { \"Key\": \"ToDate\", \"Value\": dateToString(bezl.vars['quoteSearchCriteria'].toDate) || '12/31/2099' },\r\n    { \"Key\": \"CustomerName\", \"Value\": bezl.vars['quoteSearchCriteria'].customerName || '' },\r\n    { \"Key\": \"Result\", \"Value\": bezl.vars['quoteSearchCriteria'].result || '' },\r\n    { \"Key\": \"SalespersonID\", \"Value\": bezl.vars['quoteSearchCriteria'].salespersonId || '' },\r\n    { \"Key\": \"PartNum\", \"Value\": bezl.vars['quoteSearchCriteria'].partNum || '' }\r\n] }, 0);\r\nbezl.vars['searchingQuotes'] = true;\r\n"
    },
    {
      "method": "deleteQuote",
      "code": "bezl.vars.deleting = true;\n\nrequire([bezl.vars.libraryUrl + 'quote.js'], function(quote) {\n  quote.deleteQuote(bezl, bezl.vars.Connection, bezl.vars.Company, bezl.vars.quoteData);\n});",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "bezl.vars.deleting = true;\r\nrequire([bezl.vars.libraryUrl + 'quote.js'], function (quote) {\r\n    quote.deleteQuote(bezl, bezl.vars.Connection, bezl.vars.Company, bezl.vars.quoteData);\r\n});\r\n"
    },
    {
      "method": "configLine",
      "code": "require([bezl.vars.jsUrl + 'quote.js'], function(functions) {\n\tfunctions.configureLine(bezl, parm.PartNum, parm.QuoteLine);\n});",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "require([bezl.vars.jsUrl + 'quote.js'], function (functions) {\r\n    functions.configureLine(bezl, parm.PartNum, parm.QuoteLine);\r\n});\r\n"
    },
    {
      "method": "showAttrValues",
      "code": "var curLine = bezl.data.QuoteDtls.find(dtl => dtl.QuoteLine == parm.QuoteLine);\n\nrequire([bezl.vars.jsUrl + 'quote.js'], function(functions) {\n\tfunctions.showAttributeValues(bezl, curLine, parm.AttributeID);\n});",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "var curLine = bezl.data.QuoteDtls.find(function (dtl) { return dtl.QuoteLine == parm.QuoteLine; });\r\nrequire([bezl.vars.jsUrl + 'quote.js'], function (functions) {\r\n    functions.showAttributeValues(bezl, curLine, parm.AttributeID);\r\n});\r\n"
    },
    {
      "method": "saveCustomer",
      "code": "require([bezl.vars.jsUrl + 'quote.js'], function(quote) {\n  quote.updateCustomer(bezl, bezl.vars.Connection, bezl.vars.Company, bezl.vars.quoteData, bezl.vars.MktgEvent, parm);\n});",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "require([bezl.vars.jsUrl + 'quote.js'], function (quote) {\r\n    quote.updateCustomer(bezl, bezl.vars.Connection, bezl.vars.Company, bezl.vars.quoteData, bezl.vars.MktgEvent, parm);\r\n});\r\n"
    },
    {
      "method": "includeSuspects",
      "code": "require([bezl.vars.jsUrl + 'quote.js'], function(functions) {\n\tfunctions.includeSuspects(bezl, parm);\n});",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "require([bezl.vars.jsUrl + 'quote.js'], function (functions) {\r\n    functions.includeSuspects(bezl, parm);\r\n});\r\n"
    },
    {
      "method": "changePart",
      "code": "require([bezl.vars.jsUrl + 'quote.js'], function(functions) {\n\tfunctions.changePart(bezl, parm.Line, parm.Event);\n});",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "require([bezl.vars.jsUrl + 'quote.js'], function (functions) {\r\n    functions.changePart(bezl, parm.Line, parm.Event);\r\n});\r\n"
    },
    {
      "method": "changeAttr",
      "code": "require([bezl.vars.jsUrl + 'quote.js'], function(functions) {\n\tfunctions.changeAttribute(bezl, parm.QuoteLine, parm.AttributeID, parm.Event);\n});",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "require([bezl.vars.jsUrl + 'quote.js'], function (functions) {\r\n    functions.changeAttribute(bezl, parm.QuoteLine, parm.AttributeID, parm.Event);\r\n});\r\n"
    },
    {
      "method": "newCustomerForm",
      "code": "require([bezl.vars.jsUrl + 'quote.js'], function(quote) {\n  quote.newCustomerForm(bezl);\n});",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "require([bezl.vars.jsUrl + 'quote.js'], function (quote) {\r\n    quote.newCustomerForm(bezl);\r\n});\r\n"
    },
    {
      "method": "newCustomer",
      "code": "require([bezl.vars.jsUrl + 'quote.js'], function(quote) {\n  quote.newCustomer(bezl);\n});",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "require([bezl.vars.jsUrl + 'quote.js'], function (quote) {\r\n    quote.newCustomer(bezl);\r\n});\r\n"
    },
    {
      "method": "updateSales",
      "code": "require([bezl.vars.jsUrl + 'quote.js'], function(quote) {\n  quote.updateCustomField(bezl, parm.QuoteNum, parm.Val, 'Sales_c');\n});",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "require([bezl.vars.jsUrl + 'quote.js'], function (quote) {\r\n    quote.updateCustomField(bezl, parm.QuoteNum, parm.Val, 'Sales_c');\r\n});\r\n"
    },
    {
      "method": "changeStandardPart",
      "code": "require([bezl.vars.jsUrl + 'quote.js'], function(functions) {\n\tfunctions.changeStdPart(bezl, parm);\n});",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "require([bezl.vars.jsUrl + 'quote.js'], function (functions) {\r\n    functions.changeStdPart(bezl, parm);\r\n});\r\n"
    },
    {
      "method": "changeMktgCamp",
      "code": "require([bezl.vars.jsUrl + 'quote.js'], function(functions) {\n\tfunctions.changeMktgCamp(bezl, parm);\n});",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "require([bezl.vars.jsUrl + 'quote.js'], function (functions) {\r\n    functions.changeMktgCamp(bezl, parm);\r\n});\r\n"
    },
    {
      "method": "changeTypedAttr",
      "code": "require([bezl.vars.jsUrl + 'quote.js'], function(functions) {\n\tfunctions.changeTypedAttribute(bezl, parm.QuoteLine, parm.AttributeID, parm.SelectedAttribute, parm.Event, parm.ValueID);\n});",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "require([bezl.vars.jsUrl + 'quote.js'], function (functions) {\r\n    functions.changeTypedAttribute(bezl, parm.QuoteLine, parm.AttributeID, parm.SelectedAttribute, parm.Event, parm.ValueID);\r\n});\r\n"
    },
    {
      "method": "changeTypedSubAttr",
      "code": "require([bezl.vars.jsUrl + 'quote.js'], function(functions) {\n\tfunctions.changeTypedSubAttribute(bezl, parm.QuoteLine, parm.AttributeID, parm.SelectedAttribute, parm.SubAttributeID, parm.Event, parm.ValueID);\n});",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "require([bezl.vars.jsUrl + 'quote.js'], function (functions) {\r\n    functions.changeTypedSubAttribute(bezl, parm.QuoteLine, parm.AttributeID, parm.SelectedAttribute, parm.SubAttributeID, parm.Event, parm.ValueID);\r\n});\r\n"
    },
    {
      "method": "changeSubAttr",
      "code": "require([bezl.vars.jsUrl + 'quote.js'], function(functions) {\n\tfunctions.changeSubAttribute(bezl, parm.QuoteLine, parm.AttributeID, parm.SelectedAttribute, parm.SubAttributeID, parm.Event);\n});",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "require([bezl.vars.jsUrl + 'quote.js'], function (functions) {\r\n    functions.changeSubAttribute(bezl, parm.QuoteLine, parm.AttributeID, parm.SelectedAttribute, parm.SubAttributeID, parm.Event);\r\n});\r\n"
    }
  ],
  "data": ""
}